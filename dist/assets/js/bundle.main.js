!function(t){function e(i){if(n[i])return n[i].exports;var r=n[i]={exports:{},id:i,loaded:!1};return t[i].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var n={};return e.m=t,e.c=n,e.p="/home/ubuntu/workspace/project/dist",e(0)}([function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(){new a["default"]('[data-id="main-carrousel"]',{pageDots:!1,wrapAround:!0})}function o(){var t=new u["default"]("#ranking");t.init()}var s=n(14),a=i(s),l=n(8),u=i(l);r(),o()},function(t,e,n){var i,r;!function(o,s){i=[n(9)],r=function(t){return s(o,t)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e){"use strict";var n={};n.extend=function(t,e){for(var n in e)t[n]=e[n];return t},n.modulo=function(t,e){return(t%e+e)%e},n.makeArray=function(t){var e=[];if(Array.isArray(t))e=t;else if(t&&"number"==typeof t.length)for(var n=0;n<t.length;n++)e.push(t[n]);else e.push(t);return e},n.removeFrom=function(t,e){var n=t.indexOf(e);-1!=n&&t.splice(n,1)},n.getParent=function(t,n){for(;t!=document.body;)if(t=t.parentNode,e(t,n))return t},n.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.filterFindElements=function(t,i){t=n.makeArray(t);var r=[];return t.forEach(function(t){if(t instanceof HTMLElement){if(!i)return void r.push(t);e(t,i)&&r.push(t);for(var n=t.querySelectorAll(i),o=0;o<n.length;o++)r.push(n[o])}}),r},n.debounceMethod=function(t,e,n){var i=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];t&&clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout(function(){i.apply(o,e),delete o[r]},n||100)}},n.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},n.toDashed=function(t){return t.replace(/(.)([A-Z])/g,function(t,e,n){return e+"-"+n}).toLowerCase()};var i=t.console;return n.htmlInit=function(e,r){n.docReady(function(){var o=n.toDashed(r),s="data-"+o,a=document.querySelectorAll("["+s+"]"),l=document.querySelectorAll(".js-"+o),u=n.makeArray(a).concat(n.makeArray(l)),c=s+"-options",h=t.jQuery;u.forEach(function(t){var n,o=t.getAttribute(s)||t.getAttribute(c);try{n=o&&JSON.parse(o)}catch(a){return void(i&&i.error("Error parsing "+s+" on "+t.className+": "+a))}var l=new e(t,n);h&&h.data(t,r,l)})})},n})},function(t,e,n){var i,r;!function(o,s){i=[n(3),n(5),n(1),n(12),n(19),n(11)],r=function(t,e,n,i,r,a){return s(o,t,e,n,i,r,a)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n,i,r,o,s){"use strict";function a(t,e){for(t=i.makeArray(t);t.length;)e.appendChild(t.shift())}function l(t,e){var n=i.getQueryElement(t);if(!n)return void(h&&h.error("Bad element for Flickity: "+(n||t)));if(this.element=n,this.element.flickityGUID){var r=f[this.element.flickityGUID];return r.option(e),r}u&&(this.$element=u(this.element)),this.options=i.extend({},this.constructor.defaults),this.option(e),this._create()}var u=t.jQuery,c=t.getComputedStyle,h=t.console,d=0,f={};l.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},l.createMethods=[];var p=l.prototype;i.extend(p,e.prototype),p._create=function(){var e=this.guid=++d;this.element.flickityGUID=e,f[e]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),(this.options.resize||this.options.watchCSS)&&t.addEventListener("resize",this),l.createMethods.forEach(function(t){this[t]()},this),this.options.watchCSS?this.watchCSS():this.activate()},p.option=function(t){i.extend(this.options,t)},p.activate=function(){if(!this.isActive){this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize();var t=this._filterFindCellElements(this.element.children);a(t,this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate");var e,n=this.options.initialIndex;e=this.isInitActivated?this.selectedIndex:void 0!==n&&this.cells[n]?n:0,this.select(e,!1,!0),this.isInitActivated=!0}},p._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",t.style[this.originSide]=0,this.slider=t},p._filterFindCellElements=function(t){return i.filterFindElements(t,this.options.cellSelector)},p.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},p._makeCells=function(t){var e=this._filterFindCellElements(t),n=e.map(function(t){return new r(t,this)},this);return n},p.getLastCell=function(){return this.cells[this.cells.length-1]},p.getLastSlide=function(){return this.slides[this.slides.length-1]},p.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},p._positionCells=function(t){t=t||0,this.maxCellHeight=t?this.maxCellHeight||0:0;var e=0;if(t>0){var n=this.cells[t-1];e=n.x+n.size.outerWidth}for(var i=this.cells.length,r=t;i>r;r++){var o=this.cells[r];o.setPosition(e),e+=o.size.outerWidth,this.maxCellHeight=Math.max(o.size.outerHeight,this.maxCellHeight)}this.slideableWidth=e,this.updateSlides(),this._containSlides(),this.slidesWidth=i?this.getLastSlide().target-this.slides[0].target:0},p._sizeCells=function(t){t.forEach(function(t){t.getSize()})},p.updateSlides=function(){if(this.slides=[],this.cells.length){var t=new o(this);this.slides.push(t);var e="left"==this.originSide,n=e?"marginRight":"marginLeft",i=this._getCanCellFit();this.cells.forEach(function(e,r){if(!t.cells.length)return void t.addCell(e);var s=t.outerWidth-t.firstMargin+(e.size.outerWidth-e.size[n]);i.call(this,r,s)?t.addCell(e):(t.updateTarget(),t=new o(this),this.slides.push(t),t.addCell(e))},this),t.updateTarget(),this.updateSelectedSlide()}},p._getCanCellFit=function(){var t=this.options.groupCells;if(!t)return function(){return!1};if("number"==typeof t){var e=parseInt(t,10);return function(t){return t%e!==0}}var n="string"==typeof t&&t.match(/^(\d+)%$/),i=n?parseInt(n[1],10)/100:1;return function(t,e){return e<=(this.size.innerWidth+1)*i}},p._init=p.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},p.getSize=function(){this.size=n(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var g={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};return p.setCellAlign=function(){var t=g[this.options.cellAlign];this.cellAlign=t?t[this.originSide]:this.options.cellAlign},p.setGallerySize=function(){if(this.options.setGallerySize){var t=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight;this.viewport.style.height=t+"px"}},p._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var t=this.cursorPosition,e=this.cells.length-1;this.beforeShiftCells=this._getGapCells(t,e,-1),t=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(t,0,1)}},p._getGapCells=function(t,e,n){for(var i=[];t>0;){var r=this.cells[e];if(!r)break;i.push(r),e+=n,t-=r.size.outerWidth}return i},p._containSlides=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length){var t=this.options.rightToLeft,e=t?"marginRight":"marginLeft",n=t?"marginLeft":"marginRight",i=this.slideableWidth-this.getLastCell().size[n],r=i<this.size.innerWidth,o=this.cursorPosition+this.cells[0].size[e],s=i-this.size.innerWidth*(1-this.cellAlign);this.slides.forEach(function(t){r?t.target=i*this.cellAlign:(t.target=Math.max(t.target,o),t.target=Math.min(t.target,s))},this)}},p.dispatchEvent=function(t,e,n){var i=e?[e].concat(n):n;if(this.emitEvent(t,i),u&&this.$element){t+=this.options.namespaceJQueryEvents?".flickity":"";var r=t;if(e){var o=u.Event(e);o.type=t,r=o}this.$element.trigger(r,n)}},p.select=function(t,e,n){this.isActive&&(t=parseInt(t,10),this._wrapSelect(t),(this.options.wrapAround||e)&&(t=i.modulo(t,this.slides.length)),this.slides[t]&&(this.selectedIndex=t,this.updateSelectedSlide(),n?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select"),this.dispatchEvent("cellSelect")))},p._wrapSelect=function(t){var e=this.slides.length,n=this.options.wrapAround&&e>1;if(!n)return t;var r=i.modulo(t,e),o=Math.abs(r-this.selectedIndex),s=Math.abs(r+e-this.selectedIndex),a=Math.abs(r-e-this.selectedIndex);!this.isDragSelect&&o>s?t+=e:!this.isDragSelect&&o>a&&(t-=e),0>t?this.x-=this.slideableWidth:t>=e&&(this.x+=this.slideableWidth)},p.previous=function(t,e){this.select(this.selectedIndex-1,t,e)},p.next=function(t,e){this.select(this.selectedIndex+1,t,e)},p.updateSelectedSlide=function(){var t=this.slides[this.selectedIndex];t&&(this.unselectSelectedSlide(),this.selectedSlide=t,t.select(),this.selectedCells=t.cells,this.selectedElements=t.getCellElements(),this.selectedCell=t.cells[0],this.selectedElement=this.selectedElements[0])},p.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},p.selectCell=function(t,e,n){var i;"number"==typeof t?i=this.cells[t]:("string"==typeof t&&(t=this.element.querySelector(t)),i=this.getCell(t));for(var r=0;i&&r<this.slides.length;r++){var o=this.slides[r],s=o.cells.indexOf(i);if(-1!=s)return void this.select(r,e,n)}},p.getCell=function(t){for(var e=0;e<this.cells.length;e++){var n=this.cells[e];if(n.element==t)return n}},p.getCells=function(t){t=i.makeArray(t);var e=[];return t.forEach(function(t){var n=this.getCell(t);n&&e.push(n)},this),e},p.getCellElements=function(){return this.cells.map(function(t){return t.element})},p.getParentCell=function(t){var e=this.getCell(t);return e?e:(t=i.getParent(t,".flickity-slider > *"),this.getCell(t))},p.getAdjacentCellElements=function(t,e){if(!t)return this.selectedSlide.getCellElements();e=void 0===e?this.selectedIndex:e;var n=this.slides.length;if(1+2*t>=n)return this.getCellElements();for(var r=[],o=e-t;e+t>=o;o++){var s=this.options.wrapAround?i.modulo(o,n):o,a=this.slides[s];a&&(r=r.concat(a.getCellElements()))}return r},p.uiChange=function(){this.emitEvent("uiChange")},p.childUIPointerDown=function(t){this.emitEvent("childUIPointerDown",[t])},p.onresize=function(){this.watchCSS(),this.resize()},i.debounceMethod(l,"onresize",150),p.resize=function(){if(this.isActive){this.getSize(),this.options.wrapAround&&(this.x=i.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize");var t=this.selectedElements&&this.selectedElements[0];this.selectCell(t,!1,!0)}},p.watchCSS=function(){var t=this.options.watchCSS;if(t){var e=c(this.element,":after").content;-1!=e.indexOf("flickity")?this.activate():this.deactivate()}},p.onkeydown=function(t){if(this.options.accessibility&&(!document.activeElement||document.activeElement==this.element))if(37==t.keyCode){var e=this.options.rightToLeft?"next":"previous";this.uiChange(),this[e]()}else if(39==t.keyCode){var n=this.options.rightToLeft?"previous":"next";this.uiChange(),this[n]()}},p.deactivate=function(){this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.cells.forEach(function(t){t.destroy()}),this.unselectSelectedSlide(),this.element.removeChild(this.viewport),a(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},p.destroy=function(){this.deactivate(),t.removeEventListener("resize",this),this.emitEvent("destroy"),u&&this.$element&&u.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete f[this.guid]},i.extend(p,s),l.data=function(t){t=i.getQueryElement(t);var e=t&&t.flickityGUID;return e&&f[e]},i.htmlInit(l,"flickity"),u&&u.bridget&&u.bridget("flickity",l),l.Cell=r,l})},function(t,e,n){var i,r;!function(o,s){i=s,r="function"==typeof i?i.call(e,n,e,t):i,!(void 0!==r&&(t.exports=r))}("undefined"!=typeof window?window:this,function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var n=this._events=this._events||{},i=n[t]=n[t]||[];return-1==i.indexOf(e)&&i.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var n=this._onceEvents=this._onceEvents||{},i=n[t]=n[t]||{};return i[e]=!0,this}},e.off=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=n.indexOf(e);return-1!=i&&n.splice(i,1),this}},e.emitEvent=function(t,e){var n=this._events&&this._events[t];if(n&&n.length){var i=0,r=n[i];e=e||[];for(var o=this._onceEvents&&this._onceEvents[t];r;){var s=o&&o[r];s&&(this.off(t,r),delete o[r]),r.apply(this,e),i+=s?0:1,r=n[i]}return this}},t})},function(t,e,n){var i,r;/*!
	 * jQuery JavaScript Library v3.1.0
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2016-07-07T21:44Z
	 */
!function(e,n){"use strict";"object"==typeof t&&"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function s(t,e){e=e||it;var n=e.createElement("script");n.text=t,e.head.appendChild(n).parentNode.removeChild(n)}function a(t){var e=!!t&&"length"in t&&t.length,n=vt.type(t);return"function"===n||vt.isWindow(t)?!1:"array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t}function l(t,e,n){if(vt.isFunction(e))return vt.grep(t,function(t,i){return!!e.call(t,i,t)!==n});if(e.nodeType)return vt.grep(t,function(t){return t===e!==n});if("string"==typeof e){if(Dt.test(e))return vt.filter(e,t,n);e=vt.filter(e,t)}return vt.grep(t,function(t){return lt.call(e,t)>-1!==n&&1===t.nodeType})}function u(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function c(t){var e={};return vt.each(t.match(_t)||[],function(t,n){e[n]=!0}),e}function h(t){return t}function d(t){throw t}function f(t,e,n){var i;try{t&&vt.isFunction(i=t.promise)?i.call(t).done(e).fail(n):t&&vt.isFunction(i=t.then)?i.call(t,e,n):e.call(void 0,t)}catch(t){n.call(void 0,t)}}function p(){it.removeEventListener("DOMContentLoaded",p),n.removeEventListener("load",p),vt.ready()}function g(){this.expando=vt.expando+g.uid++}function v(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Wt,"-$&").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n="true"===n?!0:"false"===n?!1:"null"===n?null:+n+""===n?+n:Ot.test(n)?JSON.parse(n):n}catch(r){}Ht.set(t,e,n)}else n=void 0;return n}function m(t,e,n,i){var r,o=1,s=20,a=i?function(){return i.cur()}:function(){return vt.css(t,e,"")},l=a(),u=n&&n[3]||(vt.cssNumber[e]?"":"px"),c=(vt.cssNumber[e]||"px"!==u&&+l)&&zt.exec(vt.css(t,e));if(c&&c[3]!==u){u=u||c[3],n=n||[],c=+l||1;do o=o||".5",c/=o,vt.style(t,e,c+u);while(o!==(o=a()/l)&&1!==o&&--s)}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}function y(t){var e,n=t.ownerDocument,i=t.nodeName,r=Xt[i];return r?r:(e=n.body.appendChild(n.createElement(i)),r=vt.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Xt[i]=r,r)}function x(t,e){for(var n,i,r=[],o=0,s=t.length;s>o;o++)i=t[o],i.style&&(n=i.style.display,e?("none"===n&&(r[o]=qt.get(i,"display")||null,r[o]||(i.style.display="")),""===i.style.display&&Ut(i)&&(r[o]=y(i))):"none"!==n&&(r[o]="none",qt.set(i,"display",n)));for(o=0;s>o;o++)null!=r[o]&&(t[o].style.display=r[o]);return t}function b(t,e){var n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[];return void 0===e||e&&vt.nodeName(t,e)?vt.merge([t],n):n}function w(t,e){for(var n=0,i=t.length;i>n;n++)qt.set(t[n],"globalEval",!e||qt.get(e[n],"globalEval"))}function C(t,e,n,i,r){for(var o,s,a,l,u,c,h=e.createDocumentFragment(),d=[],f=0,p=t.length;p>f;f++)if(o=t[f],o||0===o)if("object"===vt.type(o))vt.merge(d,o.nodeType?[o]:o);else if(Jt.test(o)){for(s=s||h.appendChild(e.createElement("div")),a=(Vt.exec(o)||["",""])[1].toLowerCase(),l=Qt[a]||Qt._default,s.innerHTML=l[1]+vt.htmlPrefilter(o)+l[2],c=l[0];c--;)s=s.lastChild;vt.merge(d,s.childNodes),s=h.firstChild,s.textContent=""}else d.push(e.createTextNode(o));for(h.textContent="",f=0;o=d[f++];)if(i&&vt.inArray(o,i)>-1)r&&r.push(o);else if(u=vt.contains(o.ownerDocument,o),s=b(h.appendChild(o),"script"),u&&w(s),n)for(c=0;o=s[c++];)Yt.test(o.type||"")&&n.push(o);return h}function S(){return!0}function E(){return!1}function T(){try{return it.activeElement}catch(t){}}function D(t,e,n,i,r,o){var s,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)D(t,a,n,i,e[a],o);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),r===!1)r=E;else if(!r)return t;return 1===o&&(s=r,r=function(t){return vt().off(t),s.apply(this,arguments)},r.guid=s.guid||(s.guid=vt.guid++)),t.each(function(){vt.event.add(this,e,r,i,n)})}function k(t,e){return vt.nodeName(t,"table")&&vt.nodeName(11!==e.nodeType?e:e.firstChild,"tr")?t.getElementsByTagName("tbody")[0]||t:t}function P(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function A(t){var e=oe.exec(t.type);return e?t.type=e[1]:t.removeAttribute("type"),t}function L(t,e){var n,i,r,o,s,a,l,u;if(1===e.nodeType){if(qt.hasData(t)&&(o=qt.access(t),s=qt.set(e,o),u=o.events)){delete s.handle,s.events={};for(r in u)for(n=0,i=u[r].length;i>n;n++)vt.event.add(e,r,u[r][n])}Ht.hasData(t)&&(a=Ht.access(t),l=vt.extend({},a),Ht.set(e,l))}}function N(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Gt.test(t.type)?e.checked=t.checked:("input"===n||"textarea"===n)&&(e.defaultValue=t.defaultValue)}function _(t,e,n,i){e=st.apply([],e);var r,o,a,l,u,c,h=0,d=t.length,f=d-1,p=e[0],g=vt.isFunction(p);if(g||d>1&&"string"==typeof p&&!pt.checkClone&&re.test(p))return t.each(function(r){var o=t.eq(r);g&&(e[0]=p.call(this,r,o.html())),_(o,e,n,i)});if(d&&(r=C(e,t[0].ownerDocument,!1,t,i),o=r.firstChild,1===r.childNodes.length&&(r=o),o||i)){for(a=vt.map(b(r,"script"),P),l=a.length;d>h;h++)u=r,h!==f&&(u=vt.clone(u,!0,!0),l&&vt.merge(a,b(u,"script"))),n.call(t[h],u,h);if(l)for(c=a[a.length-1].ownerDocument,vt.map(a,A),h=0;l>h;h++)u=a[h],Yt.test(u.type||"")&&!qt.access(u,"globalEval")&&vt.contains(c,u)&&(u.src?vt._evalUrl&&vt._evalUrl(u.src):s(u.textContent.replace(se,""),c))}return t}function j(t,e,n){for(var i,r=e?vt.filter(e,t):t,o=0;null!=(i=r[o]);o++)n||1!==i.nodeType||vt.cleanData(b(i)),i.parentNode&&(n&&vt.contains(i.ownerDocument,i)&&w(b(i,"script")),i.parentNode.removeChild(i));return t}function M(t,e,n){var i,r,o,s,a=t.style;return n=n||ue(t),n&&(s=n.getPropertyValue(e)||n[e],""!==s||vt.contains(t.ownerDocument,t)||(s=vt.style(t,e)),!pt.pixelMarginRight()&&le.test(s)&&ae.test(e)&&(i=a.width,r=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=i,a.minWidth=r,a.maxWidth=o)),void 0!==s?s+"":s}function F(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function I(t){if(t in pe)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=fe.length;n--;)if(t=fe[n]+e,t in pe)return t}function q(t,e,n){var i=zt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function H(t,e,n,i,r){for(var o=n===(i?"border":"content")?4:"width"===e?1:0,s=0;4>o;o+=2)"margin"===n&&(s+=vt.css(t,n+Bt[o],!0,r)),i?("content"===n&&(s-=vt.css(t,"padding"+Bt[o],!0,r)),"margin"!==n&&(s-=vt.css(t,"border"+Bt[o]+"Width",!0,r))):(s+=vt.css(t,"padding"+Bt[o],!0,r),"padding"!==n&&(s+=vt.css(t,"border"+Bt[o]+"Width",!0,r)));return s}function O(t,e,n){var i,r=!0,o=ue(t),s="border-box"===vt.css(t,"boxSizing",!1,o);if(t.getClientRects().length&&(i=t.getBoundingClientRect()[e]),0>=i||null==i){if(i=M(t,e,o),(0>i||null==i)&&(i=t.style[e]),le.test(i))return i;r=s&&(pt.boxSizingReliable()||i===t.style[e]),i=parseFloat(i)||0}return i+H(t,e,n||(s?"border":"content"),r,o)+"px"}function W(t,e,n,i,r){return new W.prototype.init(t,e,n,i,r)}function R(){ve&&(n.requestAnimationFrame(R),vt.fx.tick())}function z(){return n.setTimeout(function(){ge=void 0}),ge=vt.now()}function B(t,e){var n,i=0,r={height:t};for(e=e?1:0;4>i;i+=2-e)n=Bt[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function U(t,e,n){for(var i,r=(G.tweeners[e]||[]).concat(G.tweeners["*"]),o=0,s=r.length;s>o;o++)if(i=r[o].call(n,e,t))return i}function $(t,e,n){var i,r,o,s,a,l,u,c,h="width"in e||"height"in e,d=this,f={},p=t.style,g=t.nodeType&&Ut(t),v=qt.get(t,"fxshow");n.queue||(s=vt._queueHooks(t,"fx"),null==s.unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,d.always(function(){d.always(function(){s.unqueued--,vt.queue(t,"fx").length||s.empty.fire()})}));for(i in e)if(r=e[i],me.test(r)){if(delete e[i],o=o||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;g=!0}f[i]=v&&v[i]||vt.style(t,i)}if(l=!vt.isEmptyObject(e),l||!vt.isEmptyObject(f)){h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],u=v&&v.display,null==u&&(u=qt.get(t,"display")),c=vt.css(t,"display"),"none"===c&&(u?c=u:(x([t],!0),u=t.style.display||u,c=vt.css(t,"display"),x([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===vt.css(t,"float")&&(l||(d.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1;for(i in f)l||(v?"hidden"in v&&(g=v.hidden):v=qt.access(t,"fxshow",{display:u}),o&&(v.hidden=!g),g&&x([t],!0),d.done(function(){g||x([t]),qt.remove(t,"fxshow");for(i in f)vt.style(t,i,f[i])})),l=U(g?v[i]:0,i,d),i in v||(v[i]=l.start,g&&(l.end=l.start,l.start=0))}}function X(t,e){var n,i,r,o,s;for(n in t)if(i=vt.camelCase(n),r=e[i],o=t[n],vt.isArray(o)&&(r=o[1],o=t[n]=o[0]),n!==i&&(t[i]=o,delete t[n]),s=vt.cssHooks[i],s&&"expand"in s){o=s.expand(o),delete t[i];for(n in o)n in t||(t[n]=o[n],e[n]=r)}else e[i]=r}function G(t,e,n){var i,r,o=0,s=G.prefilters.length,a=vt.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ge||z(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,o=1-i,s=0,l=u.tweens.length;l>s;s++)u.tweens[s].run(o);return a.notifyWith(t,[u,o,n]),1>o&&l?n:(a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:vt.extend({},e),opts:vt.extend(!0,{specialEasing:{},easing:vt.easing._default},n),originalProperties:e,originalOptions:n,startTime:ge||z(),duration:n.duration,tweens:[],createTween:function(e,n){var i=vt.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;i>n;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(X(c,u.opts.specialEasing);s>o;o++)if(i=G.prefilters[o].call(u,t,c,u.opts))return vt.isFunction(i.stop)&&(vt._queueHooks(u.elem,u.opts.queue).stop=vt.proxy(i.stop,i)),i;return vt.map(c,U,u),vt.isFunction(u.opts.start)&&u.opts.start.call(t,u),vt.fx.timer(vt.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function V(t){return t.getAttribute&&t.getAttribute("class")||""}function Y(t,e,n,i){var r;if(vt.isArray(e))vt.each(e,function(e,r){n||Le.test(t)?i(t,r):Y(t+"["+("object"==typeof r&&null!=r?e:"")+"]",r,n,i)});else if(n||"object"!==vt.type(e))i(t,e);else for(r in e)Y(t+"["+r+"]",e[r],n,i)}function Q(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,o=e.toLowerCase().match(_t)||[];if(vt.isFunction(n))for(;i=o[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function J(t,e,n,i){function r(a){var l;return o[a]=!0,vt.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||s||o[u]?s?!(l=u):void 0:(e.dataTypes.unshift(u),r(u),!1)}),l}var o={},s=t===ze;return r(e.dataTypes[0])||!o["*"]&&r("*")}function K(t,e){var n,i,r=vt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&vt.extend(!0,t,i),t}function Z(t,e,n){for(var i,r,o,s,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)o=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){o=r;break}s||(s=r)}o=o||s}return o?(o!==l[0]&&l.unshift(o),n[o]):void 0}function tt(t,e,n,i){var r,o,s,a,l,u={},c=t.dataTypes.slice();if(c[1])for(s in t.converters)u[s.toLowerCase()]=t.converters[s];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(s=u[l+" "+o]||u["* "+o],!s)for(r in u)if(a=r.split(" "),a[1]===o&&(s=u[l+" "+a[0]]||u["* "+a[0]])){s===!0?s=u[r]:u[r]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&t["throws"])e=s(e);else try{e=s(e)}catch(h){return{state:"parsererror",error:s?h:"No conversion from "+l+" to "+o}}}return{state:"success",data:e}}function et(t){return vt.isWindow(t)?t:9===t.nodeType&&t.defaultView}var nt=[],it=n.document,rt=Object.getPrototypeOf,ot=nt.slice,st=nt.concat,at=nt.push,lt=nt.indexOf,ut={},ct=ut.toString,ht=ut.hasOwnProperty,dt=ht.toString,ft=dt.call(Object),pt={},gt="3.1.0",vt=function(t,e){return new vt.fn.init(t,e)},mt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,yt=/^-ms-/,xt=/-([a-z])/g,bt=function(t,e){return e.toUpperCase()};vt.fn=vt.prototype={jquery:gt,constructor:vt,length:0,toArray:function(){return ot.call(this)},get:function(t){return null!=t?0>t?this[t+this.length]:this[t]:ot.call(this)},pushStack:function(t){var e=vt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return vt.each(this,t)},map:function(t){return this.pushStack(vt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(ot.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(0>t?e:0);return this.pushStack(n>=0&&e>n?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:at,sort:nt.sort,splice:nt.splice},vt.extend=vt.fn.extend=function(){var t,e,n,i,r,o,s=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||vt.isFunction(s)||(s={}),a===l&&(s=this,a--);l>a;a++)if(null!=(t=arguments[a]))for(e in t)n=s[e],i=t[e],s!==i&&(u&&i&&(vt.isPlainObject(i)||(r=vt.isArray(i)))?(r?(r=!1,o=n&&vt.isArray(n)?n:[]):o=n&&vt.isPlainObject(n)?n:{},s[e]=vt.extend(u,o,i)):void 0!==i&&(s[e]=i));return s},vt.extend({expando:"jQuery"+(gt+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isFunction:function(t){return"function"===vt.type(t)},isArray:Array.isArray,isWindow:function(t){return null!=t&&t===t.window},isNumeric:function(t){var e=vt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},isPlainObject:function(t){var e,n;return t&&"[object Object]"===ct.call(t)?(e=rt(t))?(n=ht.call(e,"constructor")&&e.constructor,"function"==typeof n&&dt.call(n)===ft):!0:!1},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},type:function(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?ut[ct.call(t)]||"object":typeof t},globalEval:function(t){s(t)},camelCase:function(t){return t.replace(yt,"ms-").replace(xt,bt)},nodeName:function(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()},each:function(t,e){var n,i=0;if(a(t))for(n=t.length;n>i&&e.call(t[i],i,t[i])!==!1;i++);else for(i in t)if(e.call(t[i],i,t[i])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(mt,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(a(Object(t))?vt.merge(n,"string"==typeof t?[t]:t):at.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:lt.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;n>i;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],o=0,s=t.length,a=!n;s>o;o++)i=!e(t[o],o),i!==a&&r.push(t[o]);return r},map:function(t,e,n){var i,r,o=0,s=[];if(a(t))for(i=t.length;i>o;o++)r=e(t[o],o,n),null!=r&&s.push(r);else for(o in t)r=e(t[o],o,n),null!=r&&s.push(r);return st.apply([],s)},guid:1,proxy:function(t,e){var n,i,r;return"string"==typeof e&&(n=t[e],e=t,t=n),vt.isFunction(t)?(i=ot.call(arguments,2),r=function(){return t.apply(e||this,i.concat(ot.call(arguments)))},r.guid=t.guid=t.guid||vt.guid++,r):void 0},now:Date.now,support:pt}),"function"==typeof Symbol&&(vt.fn[Symbol.iterator]=nt[Symbol.iterator]),vt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){ut["[object "+e+"]"]=e.toLowerCase()});var wt=/*!
	 * Sizzle CSS Selector Engine v2.3.0
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-01-04
	 */
function(t){function e(t,e,n,i){var r,o,s,a,l,u,c,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&((e?e.ownerDocument||e:R)!==j&&_(e),e=e||j,F)){if(11!==p&&(l=mt.exec(t)))if(r=l[1]){if(9===p){if(!(s=e.getElementById(r)))return n;if(s.id===r)return n.push(s),n}else if(d&&(s=d.getElementById(r))&&O(e,s)&&s.id===r)return n.push(s),n}else{if(l[2])return K.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&C.getElementsByClassName&&e.getElementsByClassName)return K.apply(n,e.getElementsByClassName(r)),n}if(C.qsa&&!X[t+" "]&&(!I||!I.test(t))){if(1!==p)d=e,c=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(wt,Ct):e.setAttribute("id",a=W),u=D(t),o=u.length;o--;)u[o]="#"+a+" "+f(u[o]);c=u.join(","),d=yt.test(t)&&h(e.parentNode)||e}if(c)try{return K.apply(n,d.querySelectorAll(c)),n}catch(g){}finally{a===W&&e.removeAttribute("id")}}}return P(t.replace(at,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>S.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[W]=!0,t}function r(t){var e=j.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function o(t,e){for(var n=t.split("|"),i=n.length;i--;)S.attrHandle[n[i]]=e}function s(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return function(e){return"label"in e&&e.disabled===t||"form"in e&&e.disabled===t||"form"in e&&e.disabled===!1&&(e.isDisabled===t||e.isDisabled!==!t&&("label"in e||!Et(e))!==t)}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var r,o=t([],n.length,e),s=o.length;s--;)n[r=o[s]]&&(n[r]=!(i[r]=n[r]))})})}function h(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function d(){}function f(t){for(var e=0,n=t.length,i="";n>e;e++)i+=t[e].value;return i}function p(t,e,n){var i=e.dir,r=e.next,o=r||i,s=n&&"parentNode"===o,a=B++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||s)return t(e,n,r)}:function(e,n,l){var u,c,h,d=[z,a];if(l){for(;e=e[i];)if((1===e.nodeType||s)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||s)if(h=e[W]||(e[W]={}),c=h[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((u=c[o])&&u[0]===z&&u[1]===a)return d[2]=u[2];if(c[o]=d,d[2]=t(e,n,l))return!0}}}function g(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function v(t,n,i){for(var r=0,o=n.length;o>r;r++)e(t,n[r],i);return i}function m(t,e,n,i,r){for(var o,s=[],a=0,l=t.length,u=null!=e;l>a;a++)(o=t[a])&&(!n||n(o,i,r))&&(s.push(o),u&&e.push(a));return s}function y(t,e,n,r,o,s){return r&&!r[W]&&(r=y(r)),o&&!o[W]&&(o=y(o,s)),i(function(i,s,a,l){var u,c,h,d=[],f=[],p=s.length,g=i||v(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?g:m(g,d,t,a,l),x=n?o||(i?t:p||r)?[]:s:y;if(n&&n(y,x,a,l),r)for(u=m(x,f),r(u,[],a,l),c=u.length;c--;)(h=u[c])&&(x[f[c]]=!(y[f[c]]=h));if(i){if(o||t){if(o){for(u=[],c=x.length;c--;)(h=x[c])&&u.push(y[c]=h);o(null,x=[],u,l)}for(c=x.length;c--;)(h=x[c])&&(u=o?tt(i,h):d[c])>-1&&(i[u]=!(s[u]=h))}}else x=m(x===s?x.splice(p,x.length):x),o?o(null,s,x,l):K.apply(s,x)})}function x(t){for(var e,n,i,r=t.length,o=S.relative[t[0].type],s=o||S.relative[" "],a=o?1:0,l=p(function(t){return t===e},s,!0),u=p(function(t){return tt(e,t)>-1},s,!0),c=[function(t,n,i){var r=!o&&(i||n!==A)||((e=n).nodeType?l(t,n,i):u(t,n,i));return e=null,r}];r>a;a++)if(n=S.relative[t[a].type])c=[p(g(c),n)];else{if(n=S.filter[t[a].type].apply(null,t[a].matches),n[W]){for(i=++a;r>i&&!S.relative[t[i].type];i++);return y(a>1&&g(c),a>1&&f(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),n,i>a&&x(t.slice(a,i)),r>i&&x(t=t.slice(i)),r>i&&f(t))}c.push(n)}return g(c)}function b(t,n){var r=n.length>0,o=t.length>0,s=function(i,s,a,l,u){var c,h,d,f=0,p="0",g=i&&[],v=[],y=A,x=i||o&&S.find.TAG("*",u),b=z+=null==y?1:Math.random()||.1,w=x.length;for(u&&(A=s===j||s||u);p!==w&&null!=(c=x[p]);p++){if(o&&c){for(h=0,s||c.ownerDocument===j||(_(c),a=!F);d=t[h++];)if(d(c,s||j,a)){l.push(c);break}u&&(z=b)}r&&((c=!d&&c)&&f--,i&&g.push(c))}if(f+=p,r&&p!==f){for(h=0;d=n[h++];)d(g,v,s,a);if(i){if(f>0)for(;p--;)g[p]||v[p]||(v[p]=Q.call(l));v=m(v)}K.apply(l,v),u&&!i&&v.length>0&&f+n.length>1&&e.uniqueSort(l)}return u&&(z=b,A=y),g};return r?i(s):s}var w,C,S,E,T,D,k,P,A,L,N,_,j,M,F,I,q,H,O,W="sizzle"+1*new Date,R=t.document,z=0,B=0,U=n(),$=n(),X=n(),G=function(t,e){return t===e&&(N=!0),0},V={}.hasOwnProperty,Y=[],Q=Y.pop,J=Y.push,K=Y.push,Z=Y.slice,tt=function(t,e){for(var n=0,i=t.length;i>n;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\x00-\\xa0])+",rt="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",ot=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",st=new RegExp(nt+"+","g"),at=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ct=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(ot),dt=new RegExp("^"+it+"$"),ft={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+ot),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},pt=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,vt=/^[^{]+\{\s*\[native \w/,mt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/[+~]/,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),bt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:0>i?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},wt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,Ct=function(t,e){return e?"\x00"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},St=function(){_()},Et=p(function(t){return t.disabled===!0},{dir:"parentNode",next:"legend"});try{K.apply(Y=Z.call(R.childNodes),R.childNodes),Y[R.childNodes.length].nodeType}catch(Tt){K={apply:Y.length?function(t,e){J.apply(t,Z.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}C=e.support={},T=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return e?"HTML"!==e.nodeName:!1},_=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:R;return i!==j&&9===i.nodeType&&i.documentElement?(j=i,M=j.documentElement,F=!T(j),R!==j&&(n=j.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",St,!1):n.attachEvent&&n.attachEvent("onunload",St)),C.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),C.getElementsByTagName=r(function(t){return t.appendChild(j.createComment("")),!t.getElementsByTagName("*").length}),C.getElementsByClassName=vt.test(j.getElementsByClassName),C.getById=r(function(t){return M.appendChild(t).id=W,!j.getElementsByName||!j.getElementsByName(W).length}),C.getById?(S.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&F){var n=e.getElementById(t);return n?[n]:[]}},S.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){return t.getAttribute("id")===e}}):(delete S.find.ID,S.filter.ID=function(t){var e=t.replace(xt,bt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}}),S.find.TAG=C.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):C.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[r++];)1===n.nodeType&&i.push(n);return i}return o},S.find.CLASS=C.getElementsByClassName&&function(t,e){return"undefined"!=typeof e.getElementsByClassName&&F?e.getElementsByClassName(t):void 0},q=[],I=[],(C.qsa=vt.test(j.querySelectorAll))&&(r(function(t){M.appendChild(t).innerHTML="<a id='"+W+"'></a><select id='"+W+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&I.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||I.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+W+"-]").length||I.push("~="),t.querySelectorAll(":checked").length||I.push(":checked"),t.querySelectorAll("a#"+W+"+*").length||I.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=j.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&I.push("name"+nt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&I.push(":enabled",":disabled"),M.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),I.push(",.*:")})),(C.matchesSelector=vt.test(H=M.matches||M.webkitMatchesSelector||M.mozMatchesSelector||M.oMatchesSelector||M.msMatchesSelector))&&r(function(t){C.disconnectedMatch=H.call(t,"*"),H.call(t,"[s!='']:x"),q.push("!=",ot)}),I=I.length&&new RegExp(I.join("|")),q=q.length&&new RegExp(q.join("|")),e=vt.test(M.compareDocumentPosition),O=e||vt.test(M.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},G=e?function(t,e){if(t===e)return N=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!C.sortDetached&&e.compareDocumentPosition(t)===n?t===j||t.ownerDocument===R&&O(R,t)?-1:e===j||e.ownerDocument===R&&O(R,e)?1:L?tt(L,t)-tt(L,e):0:4&n?-1:1)}:function(t,e){if(t===e)return N=!0,0;var n,i=0,r=t.parentNode,o=e.parentNode,a=[t],l=[e];if(!r||!o)return t===j?-1:e===j?1:r?-1:o?1:L?tt(L,t)-tt(L,e):0;if(r===o)return s(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?s(a[i],l[i]):a[i]===R?-1:l[i]===R?1:0},j):j},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==j&&_(t),n=n.replace(ct,"='$1']"),C.matchesSelector&&F&&!X[n+" "]&&(!q||!q.test(n))&&(!I||!I.test(n)))try{var i=H.call(t,n);if(i||C.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,j,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==j&&_(t),O(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==j&&_(t);var n=S.attrHandle[e.toLowerCase()],i=n&&V.call(S.attrHandle,e.toLowerCase())?n(t,e,!F):void 0;return void 0!==i?i:C.attributes||!F?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.escape=function(t){return(t+"").replace(wt,Ct)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(N=!C.detectDuplicates,L=!C.sortStable&&t.slice(0),t.sort(G),N){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return L=null,t},E=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=E(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=E(e);return n},S=e.selectors={cacheLength:50,createPseudo:i,match:ft,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,bt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,bt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return ft.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=D(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,bt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=U[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&U(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var o=e.attr(r,t);return null==o?"!="===n:n?(o+="","="===n?o===i:"!="===n?o!==i:"^="===n?i&&0===o.indexOf(i):"*="===n?i&&o.indexOf(i)>-1:"$="===n?i&&o.slice(-i.length)===i:"~="===n?(" "+o.replace(st," ")+" ").indexOf(i)>-1:"|="===n?o===i||o.slice(0,i.length+1)===i+"-":!1):!0}},CHILD:function(t,e,n,i,r){var o="nth"!==t.slice(0,3),s="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var u,c,h,d,f,p,g=o!==s?"nextSibling":"previousSibling",v=e.parentNode,m=a&&e.nodeName.toLowerCase(),y=!l&&!a,x=!1;if(v){if(o){for(;g;){for(d=e;d=d[g];)if(a?d.nodeName.toLowerCase()===m:1===d.nodeType)return!1;p=g="only"===t&&!p&&"nextSibling"}return!0}if(p=[s?v.firstChild:v.lastChild],s&&y){for(d=v,h=d[W]||(d[W]={}),c=h[d.uniqueID]||(h[d.uniqueID]={}),u=c[t]||[],f=u[0]===z&&u[1],x=f&&u[2],d=f&&v.childNodes[f];d=++f&&d&&d[g]||(x=f=0)||p.pop();)if(1===d.nodeType&&++x&&d===e){c[t]=[z,f,x];break}}else if(y&&(d=e,h=d[W]||(d[W]={}),c=h[d.uniqueID]||(h[d.uniqueID]={}),u=c[t]||[],f=u[0]===z&&u[1],x=f),x===!1)for(;(d=++f&&d&&d[g]||(x=f=0)||p.pop())&&((a?d.nodeName.toLowerCase()!==m:1!==d.nodeType)||!++x||(y&&(h=d[W]||(d[W]={}),c=h[d.uniqueID]||(h[d.uniqueID]={}),c[t]=[z,x]),d!==e)););return x-=r,x===i||x%i===0&&x/i>=0}}},PSEUDO:function(t,n){var r,o=S.pseudos[t]||S.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return o[W]?o(n):o.length>1?(r=[t,t,"",n],S.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=o(t,n),s=r.length;s--;)i=tt(t,r[s]),t[i]=!(e[i]=r[s])}):function(t){return o(t,0,r)}):o}},pseudos:{not:i(function(t){var e=[],n=[],r=k(t.replace(at,"$1"));return r[W]?i(function(t,e,n,i){for(var o,s=r(t,null,i,[]),a=t.length;a--;)(o=s[a])&&(t[a]=!(e[a]=o))}):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(xt,bt),function(e){return(e.textContent||e.innerText||E(e)).indexOf(t)>-1}}),lang:i(function(t){return dt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,bt).toLowerCase(),function(e){var n;do if(n=F?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===M},focus:function(t){return t===j.activeElement&&(!j.hasFocus||j.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!S.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return pt.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[0>n?n+e:n]}),even:c(function(t,e){for(var n=0;e>n;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;e>n;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=0>n?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=0>n?n+e:n;++i<e;)t.push(i);return t})}},S.pseudos.nth=S.pseudos.eq;for(w in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[w]=a(w);for(w in{submit:!0,reset:!0})S.pseudos[w]=l(w);return d.prototype=S.filters=S.pseudos,S.setFilters=new d,D=e.tokenize=function(t,n){var i,r,o,s,a,l,u,c=$[t+" "];if(c)return n?0:c.slice(0);for(a=t,l=[],u=S.preFilter;a;){(!i||(r=lt.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),l.push(o=[])),i=!1,(r=ut.exec(a))&&(i=r.shift(),o.push({value:i,type:r[0].replace(at," ")}),a=a.slice(i.length));for(s in S.filter)!(r=ft[s].exec(a))||u[s]&&!(r=u[s](r))||(i=r.shift(),o.push({value:i,type:s,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):$(t,l).slice(0)},k=e.compile=function(t,e){var n,i=[],r=[],o=X[t+" "];if(!o){for(e||(e=D(t)),n=e.length;n--;)o=x(e[n]),o[W]?i.push(o):r.push(o);o=X(t,b(r,i)),o.selector=t}return o},P=e.select=function(t,e,n,i){var r,o,s,a,l,u="function"==typeof t&&t,c=!i&&D(t=u.selector||t);if(n=n||[],1===c.length){if(o=c[0]=c[0].slice(0),o.length>2&&"ID"===(s=o[0]).type&&C.getById&&9===e.nodeType&&F&&S.relative[o[1].type]){if(e=(S.find.ID(s.matches[0].replace(xt,bt),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(o.shift().value.length)}for(r=ft.needsContext.test(t)?0:o.length;r--&&(s=o[r],!S.relative[a=s.type]);)if((l=S.find[a])&&(i=l(s.matches[0].replace(xt,bt),yt.test(o[0].type)&&h(e.parentNode)||e))){if(o.splice(r,1),t=i.length&&f(o),!t)return K.apply(n,i),n;break}}return(u||k(t,c))(i,e,!F,n,!e||yt.test(t)&&h(e.parentNode)||e),n},C.sortStable=W.split("").sort(G).join("")===W,C.detectDuplicates=!!N,_(),C.sortDetached=r(function(t){return 1&t.compareDocumentPosition(j.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||o("type|href|height|width",function(t,e,n){return n?void 0:t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),C.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||o("value",function(t,e,n){return n||"input"!==t.nodeName.toLowerCase()?void 0:t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||o(et,function(t,e,n){var i;return n?void 0:t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(n);vt.find=wt,vt.expr=wt.selectors,vt.expr[":"]=vt.expr.pseudos,vt.uniqueSort=vt.unique=wt.uniqueSort,vt.text=wt.getText,vt.isXMLDoc=wt.isXML,vt.contains=wt.contains,vt.escapeSelector=wt.escape;var Ct=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&vt(t).is(n))break;i.push(t)}return i},St=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},Et=vt.expr.match.needsContext,Tt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i,Dt=/^.[^:#\[\.,]*$/;vt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?vt.find.matchesSelector(i,t)?[i]:[]:vt.find.matches(t,vt.grep(e,function(t){return 1===t.nodeType}))},vt.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(vt(t).filter(function(){for(e=0;i>e;e++)if(vt.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;i>e;e++)vt.find(t,r[e],n);return i>1?vt.uniqueSort(n):n},filter:function(t){return this.pushStack(l(this,t||[],!1))},not:function(t){return this.pushStack(l(this,t||[],!0))},is:function(t){return!!l(this,"string"==typeof t&&Et.test(t)?vt(t):t||[],!1).length}});var kt,Pt=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,At=vt.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||kt,"string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Pt.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof vt?e[0]:e,vt.merge(this,vt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:it,!0)),Tt.test(i[1])&&vt.isPlainObject(e))for(i in e)vt.isFunction(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return r=it.getElementById(i[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):vt.isFunction(t)?void 0!==n.ready?n.ready(t):t(vt):vt.makeArray(t,this)};At.prototype=vt.fn,kt=vt(it);var Lt=/^(?:parents|prev(?:Until|All))/,Nt={children:!0,contents:!0,next:!0,prev:!0};vt.fn.extend({has:function(t){var e=vt(t,this),n=e.length;return this.filter(function(){for(var t=0;n>t;t++)if(vt.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,o=[],s="string"!=typeof t&&vt(t);if(!Et.test(t))for(;r>i;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&vt.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?vt.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?lt.call(vt(t),this[0]):lt.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(vt.uniqueSort(vt.merge(this.get(),vt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),vt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Ct(t,"parentNode")},parentsUntil:function(t,e,n){return Ct(t,"parentNode",n)},next:function(t){return u(t,"nextSibling")},prev:function(t){return u(t,"previousSibling")},nextAll:function(t){return Ct(t,"nextSibling")},prevAll:function(t){return Ct(t,"previousSibling")},nextUntil:function(t,e,n){return Ct(t,"nextSibling",n)},prevUntil:function(t,e,n){return Ct(t,"previousSibling",n)},siblings:function(t){return St((t.parentNode||{}).firstChild,t)},children:function(t){return St(t.firstChild)},contents:function(t){return t.contentDocument||vt.merge([],t.childNodes)}},function(t,e){vt.fn[t]=function(n,i){var r=vt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=vt.filter(i,r)),this.length>1&&(Nt[t]||vt.uniqueSort(r),Lt.test(t)&&r.reverse()),this.pushStack(r)}});var _t=/\S+/g;vt.Callbacks=function(t){t="string"==typeof t?c(t):vt.extend({},t);var e,n,i,r,o=[],s=[],a=-1,l=function(){for(r=t.once,i=e=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)o[a].apply(n[0],n[1])===!1&&t.stopOnFalse&&(a=o.length,n=!1);t.memory||(n=!1),e=!1,r&&(o=n?[]:"")},u={add:function(){return o&&(n&&!e&&(a=o.length-1,s.push(n)),function i(e){vt.each(e,function(e,n){vt.isFunction(n)?t.unique&&u.has(n)||o.push(n):n&&n.length&&"string"!==vt.type(n)&&i(n)})}(arguments),n&&!e&&l()),this},remove:function(){return vt.each(arguments,function(t,e){for(var n;(n=vt.inArray(e,o,n))>-1;)o.splice(n,1),a>=n&&a--}),this},has:function(t){return t?vt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return r=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return r=s=[],n||e||(o=n=""),this},locked:function(){return!!r},fireWith:function(t,n){return r||(n=n||[],n=[t,n.slice?n.slice():n],s.push(n),e||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!i}};return u},vt.extend({Deferred:function(t){var e=[["notify","progress",vt.Callbacks("memory"),vt.Callbacks("memory"),2],["resolve","done",vt.Callbacks("once memory"),vt.Callbacks("once memory"),0,"resolved"],["reject","fail",vt.Callbacks("once memory"),vt.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(t){return r.then(null,t)},pipe:function(){var t=arguments;return vt.Deferred(function(n){vt.each(e,function(e,i){var r=vt.isFunction(t[i[4]])&&t[i[4]];o[i[1]](function(){var t=r&&r.apply(this,arguments);t&&vt.isFunction(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(t,i,r){function o(t,e,i,r){return function(){var a=this,l=arguments,u=function(){var n,u;if(!(s>t)){if(n=i.apply(a,l),n===e.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,vt.isFunction(u)?r?u.call(n,o(s,e,h,r),o(s,e,d,r)):(s++,u.call(n,o(s,e,h,r),o(s,e,d,r),o(s,e,h,e.notifyWith))):(i!==h&&(a=void 0,l=[n]),(r||e.resolveWith)(a,l))}},c=r?u:function(){try{u()}catch(n){vt.Deferred.exceptionHook&&vt.Deferred.exceptionHook(n,c.stackTrace),t+1>=s&&(i!==d&&(a=void 0,l=[n]),e.rejectWith(a,l))}};t?c():(vt.Deferred.getStackHook&&(c.stackTrace=vt.Deferred.getStackHook()),n.setTimeout(c))}}var s=0;return vt.Deferred(function(n){e[0][3].add(o(0,n,vt.isFunction(r)?r:h,n.notifyWith)),e[1][3].add(o(0,n,vt.isFunction(t)?t:h)),e[2][3].add(o(0,n,vt.isFunction(i)?i:d))}).promise()},promise:function(t){return null!=t?vt.extend(t,r):r}},o={};return vt.each(e,function(t,n){var s=n[2],a=n[5];r[n[1]]=s.add,a&&s.add(function(){i=a},e[3-t][2].disable,e[0][2].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith}),r.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,i=Array(n),r=ot.call(arguments),o=vt.Deferred(),s=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?ot.call(arguments):n,--e||o.resolveWith(i,r)}};if(1>=e&&(f(t,o.done(s(n)).resolve,o.reject),"pending"===o.state()||vt.isFunction(r[n]&&r[n].then)))return o.then();for(;n--;)f(r[n],s(n),o.reject);return o.promise()}});var jt=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;vt.Deferred.exceptionHook=function(t,e){n.console&&n.console.warn&&t&&jt.test(t.name)&&n.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},vt.readyException=function(t){n.setTimeout(function(){throw t})};var Mt=vt.Deferred();vt.fn.ready=function(t){return Mt.then(t)["catch"](function(t){vt.readyException(t)}),this},vt.extend({isReady:!1,readyWait:1,holdReady:function(t){t?vt.readyWait++:vt.ready(!0)},ready:function(t){(t===!0?--vt.readyWait:vt.isReady)||(vt.isReady=!0,t!==!0&&--vt.readyWait>0||Mt.resolveWith(it,[vt]))}}),vt.ready.then=Mt.then,"complete"===it.readyState||"loading"!==it.readyState&&!it.documentElement.doScroll?n.setTimeout(vt.ready):(it.addEventListener("DOMContentLoaded",p),n.addEventListener("load",p));var Ft=function(t,e,n,i,r,o,s){var a=0,l=t.length,u=null==n;if("object"===vt.type(n)){r=!0;for(a in n)Ft(t,e,a,n[a],!0,o,s)}else if(void 0!==i&&(r=!0,vt.isFunction(i)||(s=!0),u&&(s?(e.call(t,i),e=null):(u=e,e=function(t,e,n){return u.call(vt(t),n)})),e))for(;l>a;a++)e(t[a],n,s?i:i.call(t[a],a,e(t[a],n)));return r?t:u?e.call(t):l?e(t[0],n):o},It=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},It(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[vt.camelCase(e)]=n;else for(i in e)r[vt.camelCase(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][vt.camelCase(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){vt.isArray(e)?e=e.map(vt.camelCase):(e=vt.camelCase(e),e=e in i?[e]:e.match(_t)||[]),n=e.length;for(;n--;)delete i[e[n]]}(void 0===e||vt.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!vt.isEmptyObject(e)}};var qt=new g,Ht=new g,Ot=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Wt=/[A-Z]/g;vt.extend({hasData:function(t){return Ht.hasData(t)||qt.hasData(t)},data:function(t,e,n){return Ht.access(t,e,n)},removeData:function(t,e){Ht.remove(t,e)},_data:function(t,e,n){return qt.access(t,e,n)},_removeData:function(t,e){qt.remove(t,e)}}),vt.fn.extend({data:function(t,e){var n,i,r,o=this[0],s=o&&o.attributes;if(void 0===t){if(this.length&&(r=Ht.get(o),1===o.nodeType&&!qt.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&(i=s[n].name,0===i.indexOf("data-")&&(i=vt.camelCase(i.slice(5)),v(o,i,r[i])));qt.set(o,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Ht.set(this,t)}):Ft(this,function(e){var n;if(o&&void 0===e){if(n=Ht.get(o,t),void 0!==n)return n;if(n=v(o,t),void 0!==n)return n}else this.each(function(){Ht.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Ht.remove(this,t)})}}),vt.extend({queue:function(t,e,n){var i;return t?(e=(e||"fx")+"queue",i=qt.get(t,e),n&&(!i||vt.isArray(n)?i=qt.access(t,e,vt.makeArray(n)):i.push(n)),i||[]):void 0},dequeue:function(t,e){e=e||"fx";var n=vt.queue(t,e),i=n.length,r=n.shift(),o=vt._queueHooks(t,e),s=function(){vt.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete o.stop,r.call(t,s,o)),!i&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return qt.get(t,n)||qt.access(t,n,{empty:vt.Callbacks("once memory").add(function(){qt.remove(t,[e+"queue",n])})})}}),vt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?vt.queue(this[0],t):void 0===e?this:this.each(function(){var n=vt.queue(this,t,e);vt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&vt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){vt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=vt.Deferred(),o=this,s=this.length,a=function(){--i||r.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";s--;)n=qt.get(o[s],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var Rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,zt=new RegExp("^(?:([+-])=|)("+Rt+")([a-z%]*)$","i"),Bt=["Top","Right","Bottom","Left"],Ut=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&vt.contains(t.ownerDocument,t)&&"none"===vt.css(t,"display")},$t=function(t,e,n,i){var r,o,s={};for(o in e)s[o]=t.style[o],t.style[o]=e[o];r=n.apply(t,i||[]);for(o in e)t.style[o]=s[o];return r},Xt={};vt.fn.extend({show:function(){return x(this,!0)},hide:function(){return x(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Ut(this)?vt(this).show():vt(this).hide()})}});var Gt=/^(?:checkbox|radio)$/i,Vt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Yt=/^$|\/(?:java|ecma)script/i,Qt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Qt.optgroup=Qt.option,Qt.tbody=Qt.tfoot=Qt.colgroup=Qt.caption=Qt.thead,Qt.th=Qt.td;var Jt=/<|&#?\w+;/;!function(){var t=it.createDocumentFragment(),e=t.appendChild(it.createElement("div")),n=it.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),pt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",
pt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var Kt=it.documentElement,Zt=/^key/,te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ee=/^([^.]*)(?:\.(.+)|)/;vt.event={global:{},add:function(t,e,n,i,r){var o,s,a,l,u,c,h,d,f,p,g,v=qt.get(t);if(v)for(n.handler&&(o=n,n=o.handler,r=o.selector),r&&vt.find.matchesSelector(Kt,r),n.guid||(n.guid=vt.guid++),(l=v.events)||(l=v.events={}),(s=v.handle)||(s=v.handle=function(e){return"undefined"!=typeof vt&&vt.event.triggered!==e.type?vt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(_t)||[""],u=e.length;u--;)a=ee.exec(e[u])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f&&(h=vt.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=vt.event.special[f]||{},c=vt.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&vt.expr.match.needsContext.test(r),namespace:p.join(".")},o),(d=l[f])||(d=l[f]=[],d.delegateCount=0,h.setup&&h.setup.call(t,i,p,s)!==!1||t.addEventListener&&t.addEventListener(f,s)),h.add&&(h.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,c):d.push(c),vt.event.global[f]=!0)},remove:function(t,e,n,i,r){var o,s,a,l,u,c,h,d,f,p,g,v=qt.hasData(t)&&qt.get(t);if(v&&(l=v.events)){for(e=(e||"").match(_t)||[""],u=e.length;u--;)if(a=ee.exec(e[u])||[],f=g=a[1],p=(a[2]||"").split(".").sort(),f){for(h=vt.event.special[f]||{},f=(i?h.delegateType:h.bindType)||f,d=l[f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=d.length;o--;)c=d[o],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(d.splice(o,1),c.selector&&d.delegateCount--,h.remove&&h.remove.call(t,c));s&&!d.length&&(h.teardown&&h.teardown.call(t,p,v.handle)!==!1||vt.removeEvent(t,f,v.handle),delete l[f])}else for(f in l)vt.event.remove(t,f+e[u],n,i,!0);vt.isEmptyObject(l)&&qt.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,o,s,a=vt.event.fix(t),l=new Array(arguments.length),u=(qt.get(this,"events")||{})[a.type]||[],c=vt.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,a)!==!1){for(s=vt.event.handlers.call(this,a,u),e=0;(r=s[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(o=r.handlers[n++])&&!a.isImmediatePropagationStopped();)(!a.rnamespace||a.rnamespace.test(o.namespace))&&(a.handleObj=o,a.data=o.data,i=((vt.event.special[o.origType]||{}).handle||o.handler).apply(r.elem,l),void 0!==i&&(a.result=i)===!1&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,o,s=[],a=e.delegateCount,l=t.target;if(a&&l.nodeType&&("click"!==t.type||isNaN(t.button)||t.button<1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&(l.disabled!==!0||"click"!==t.type)){for(i=[],n=0;a>n;n++)o=e[n],r=o.selector+" ",void 0===i[r]&&(i[r]=o.needsContext?vt(r,this).index(l)>-1:vt.find(r,this,null,[l]).length),i[r]&&i.push(o);i.length&&s.push({elem:l,handlers:i})}return a<e.length&&s.push({elem:this,handlers:e.slice(a)}),s},addProp:function(t,e){Object.defineProperty(vt.Event.prototype,t,{enumerable:!0,configurable:!0,get:vt.isFunction(e)?function(){return this.originalEvent?e(this.originalEvent):void 0}:function(){return this.originalEvent?this.originalEvent[t]:void 0},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[vt.expando]?t:new vt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==T()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===T()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&vt.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(t){return vt.nodeName(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},vt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},vt.Event=function(t,e){return this instanceof vt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?S:E,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&vt.extend(this,e),this.timeStamp=t&&t.timeStamp||vt.now(),void(this[vt.expando]=!0)):new vt.Event(t,e)},vt.Event.prototype={constructor:vt.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=S,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=S,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=S,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},vt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Zt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&te.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},vt.event.addProp),vt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){vt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,o=t.handleObj;return(!r||r!==i&&!vt.contains(i,r))&&(t.type=o.origType,n=o.handler.apply(this,arguments),t.type=e),n}}}),vt.fn.extend({on:function(t,e,n,i){return D(this,t,e,n,i)},one:function(t,e,n,i){return D(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,vt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return(e===!1||"function"==typeof e)&&(n=e,e=void 0),n===!1&&(n=E),this.each(function(){vt.event.remove(this,t,n,e)})}});var ne=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ie=/<script|<style|<link/i,re=/checked\s*(?:[^=]|=\s*.checked.)/i,oe=/^true\/(.*)/,se=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;vt.extend({htmlPrefilter:function(t){return t.replace(ne,"<$1></$2>")},clone:function(t,e,n){var i,r,o,s,a=t.cloneNode(!0),l=vt.contains(t.ownerDocument,t);if(!(pt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||vt.isXMLDoc(t)))for(s=b(a),o=b(t),i=0,r=o.length;r>i;i++)N(o[i],s[i]);if(e)if(n)for(o=o||b(t),s=s||b(a),i=0,r=o.length;r>i;i++)L(o[i],s[i]);else L(t,a);return s=b(a,"script"),s.length>0&&w(s,!l&&b(t,"script")),a},cleanData:function(t){for(var e,n,i,r=vt.event.special,o=0;void 0!==(n=t[o]);o++)if(It(n)){if(e=n[qt.expando]){if(e.events)for(i in e.events)r[i]?vt.event.remove(n,i):vt.removeEvent(n,i,e.handle);n[qt.expando]=void 0}n[Ht.expando]&&(n[Ht.expando]=void 0)}}}),vt.fn.extend({detach:function(t){return j(this,t,!0)},remove:function(t){return j(this,t)},text:function(t){return Ft(this,function(t){return void 0===t?vt.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=t)})},null,t,arguments.length)},append:function(){return _(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=k(this,t);e.appendChild(t)}})},prepend:function(){return _(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=k(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return _(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return _(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(vt.cleanData(b(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null==t?!1:t,e=null==e?t:e,this.map(function(){return vt.clone(this,t,e)})},html:function(t){return Ft(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!ie.test(t)&&!Qt[(Vt.exec(t)||["",""])[1].toLowerCase()]){t=vt.htmlPrefilter(t);try{for(;i>n;n++)e=this[n]||{},1===e.nodeType&&(vt.cleanData(b(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return _(this,arguments,function(e){var n=this.parentNode;vt.inArray(this,t)<0&&(vt.cleanData(b(this)),n&&n.replaceChild(e,this))},t)}}),vt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){vt.fn[t]=function(t){for(var n,i=[],r=vt(t),o=r.length-1,s=0;o>=s;s++)n=s===o?this:this.clone(!0),vt(r[s])[e](n),at.apply(i,n.get());return this.pushStack(i)}});var ae=/^margin/,le=new RegExp("^("+Rt+")(?!px)[a-z%]+$","i"),ue=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=n),e.getComputedStyle(t)};!function(){function t(){if(a){a.style.cssText="box-sizing:border-box;position:relative;display:block;margin:auto;border:1px;padding:1px;top:1%;width:50%",a.innerHTML="",Kt.appendChild(s);var t=n.getComputedStyle(a);e="1%"!==t.top,o="2px"===t.marginLeft,i="4px"===t.width,a.style.marginRight="50%",r="4px"===t.marginRight,Kt.removeChild(s),a=null}}var e,i,r,o,s=it.createElement("div"),a=it.createElement("div");a.style&&(a.style.backgroundClip="content-box",a.cloneNode(!0).style.backgroundClip="",pt.clearCloneStyle="content-box"===a.style.backgroundClip,s.style.cssText="border:0;width:8px;height:0;top:0;left:-9999px;padding:0;margin-top:1px;position:absolute",s.appendChild(a),vt.extend(pt,{pixelPosition:function(){return t(),e},boxSizingReliable:function(){return t(),i},pixelMarginRight:function(){return t(),r},reliableMarginLeft:function(){return t(),o}}))}();var ce=/^(none|table(?!-c[ea]).+)/,he={position:"absolute",visibility:"hidden",display:"block"},de={letterSpacing:"0",fontWeight:"400"},fe=["Webkit","Moz","ms"],pe=it.createElement("div").style;vt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=M(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,o,s,a=vt.camelCase(e),l=t.style;return e=vt.cssProps[a]||(vt.cssProps[a]=I(a)||a),s=vt.cssHooks[e]||vt.cssHooks[a],void 0===n?s&&"get"in s&&void 0!==(r=s.get(t,!1,i))?r:l[e]:(o=typeof n,"string"===o&&(r=zt.exec(n))&&r[1]&&(n=m(t,e,r),o="number"),null!=n&&n===n&&("number"===o&&(n+=r&&r[3]||(vt.cssNumber[a]?"":"px")),pt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),s&&"set"in s&&void 0===(n=s.set(t,n,i))||(l[e]=n)),void 0)}},css:function(t,e,n,i){var r,o,s,a=vt.camelCase(e);return e=vt.cssProps[a]||(vt.cssProps[a]=I(a)||a),s=vt.cssHooks[e]||vt.cssHooks[a],s&&"get"in s&&(r=s.get(t,!0,n)),void 0===r&&(r=M(t,e,i)),"normal"===r&&e in de&&(r=de[e]),""===n||n?(o=parseFloat(r),n===!0||isFinite(o)?o||0:r):r}}),vt.each(["height","width"],function(t,e){vt.cssHooks[e]={get:function(t,n,i){return n?!ce.test(vt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?O(t,e,i):$t(t,he,function(){return O(t,e,i)}):void 0},set:function(t,n,i){var r,o=i&&ue(t),s=i&&H(t,e,i,"border-box"===vt.css(t,"boxSizing",!1,o),o);return s&&(r=zt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=vt.css(t,e)),q(t,n,s)}}}),vt.cssHooks.marginLeft=F(pt.reliableMarginLeft,function(t,e){return e?(parseFloat(M(t,"marginLeft"))||t.getBoundingClientRect().left-$t(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px":void 0}),vt.each({margin:"",padding:"",border:"Width"},function(t,e){vt.cssHooks[t+e]={expand:function(n){for(var i=0,r={},o="string"==typeof n?n.split(" "):[n];4>i;i++)r[t+Bt[i]+e]=o[i]||o[i-2]||o[0];return r}},ae.test(t)||(vt.cssHooks[t+e].set=q)}),vt.fn.extend({css:function(t,e){return Ft(this,function(t,e,n){var i,r,o={},s=0;if(vt.isArray(e)){for(i=ue(t),r=e.length;r>s;s++)o[e[s]]=vt.css(t,e[s],!1,i);return o}return void 0!==n?vt.style(t,e,n):vt.css(t,e)},t,e,arguments.length>1)}}),vt.Tween=W,W.prototype={constructor:W,init:function(t,e,n,i,r,o){this.elem=t,this.prop=n,this.easing=r||vt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=o||(vt.cssNumber[n]?"":"px")},cur:function(){var t=W.propHooks[this.prop];return t&&t.get?t.get(this):W.propHooks._default.get(this)},run:function(t){var e,n=W.propHooks[this.prop];return this.options.duration?this.pos=e=vt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=vt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){vt.fx.step[t.prop]?vt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[vt.cssProps[t.prop]]&&!vt.cssHooks[t.prop]?t.elem[t.prop]=t.now:vt.style(t.elem,t.prop,t.now+t.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},vt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},vt.fx=W.prototype.init,vt.fx.step={};var ge,ve,me=/^(?:toggle|show|hide)$/,ye=/queueHooks$/;vt.Animation=vt.extend(G,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return m(n.elem,t,zt.exec(e),n),n}]},tweener:function(t,e){vt.isFunction(t)?(e=t,t=["*"]):t=t.match(_t);for(var n,i=0,r=t.length;r>i;i++)n=t[i],G.tweeners[n]=G.tweeners[n]||[],G.tweeners[n].unshift(e)},prefilters:[$],prefilter:function(t,e){e?G.prefilters.unshift(t):G.prefilters.push(t)}}),vt.speed=function(t,e,n){var i=t&&"object"==typeof t?vt.extend({},t):{complete:n||!n&&e||vt.isFunction(t)&&t,duration:t,easing:n&&e||e&&!vt.isFunction(e)&&e};return vt.fx.off||it.hidden?i.duration=0:i.duration="number"==typeof i.duration?i.duration:i.duration in vt.fx.speeds?vt.fx.speeds[i.duration]:vt.fx.speeds._default,(null==i.queue||i.queue===!0)&&(i.queue="fx"),i.old=i.complete,i.complete=function(){vt.isFunction(i.old)&&i.old.call(this),i.queue&&vt.dequeue(this,i.queue)},i},vt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Ut).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=vt.isEmptyObject(t),o=vt.speed(e,n,i),s=function(){var e=G(this,vt.extend({},t),o);(r||qt.get(this,"finish"))&&e.stop(!0)};return s.finish=s,r||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",o=vt.timers,s=qt.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ye.test(r)&&i(s[r]);for(r=o.length;r--;)o[r].elem!==this||null!=t&&o[r].queue!==t||(o[r].anim.stop(n),e=!1,o.splice(r,1));(e||!n)&&vt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=qt.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],o=vt.timers,s=i?i.length:0;for(n.finish=!0,vt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;s>e;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),vt.each(["toggle","show","hide"],function(t,e){var n=vt.fn[e];vt.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(B(e,!0),t,i,r)}}),vt.each({slideDown:B("show"),slideUp:B("hide"),slideToggle:B("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){vt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),vt.timers=[],vt.fx.tick=function(){var t,e=0,n=vt.timers;for(ge=vt.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||vt.fx.stop(),ge=void 0},vt.fx.timer=function(t){vt.timers.push(t),t()?vt.fx.start():vt.timers.pop()},vt.fx.interval=13,vt.fx.start=function(){ve||(ve=n.requestAnimationFrame?n.requestAnimationFrame(R):n.setInterval(vt.fx.tick,vt.fx.interval))},vt.fx.stop=function(){n.cancelAnimationFrame?n.cancelAnimationFrame(ve):n.clearInterval(ve),ve=null},vt.fx.speeds={slow:600,fast:200,_default:400},vt.fn.delay=function(t,e){return t=vt.fx?vt.fx.speeds[t]||t:t,e=e||"fx",this.queue(e,function(e,i){var r=n.setTimeout(e,t);i.stop=function(){n.clearTimeout(r)}})},function(){var t=it.createElement("input"),e=it.createElement("select"),n=e.appendChild(it.createElement("option"));t.type="checkbox",pt.checkOn=""!==t.value,pt.optSelected=n.selected,t=it.createElement("input"),t.value="t",t.type="radio",pt.radioValue="t"===t.value}();var xe,be=vt.expr.attrHandle;vt.fn.extend({attr:function(t,e){return Ft(this,vt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){vt.removeAttr(this,t)})}}),vt.extend({attr:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof t.getAttribute?vt.prop(t,e,n):(1===o&&vt.isXMLDoc(t)||(r=vt.attrHooks[e.toLowerCase()]||(vt.expr.match.bool.test(e)?xe:void 0)),void 0!==n?null===n?void vt.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=vt.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!pt.radioValue&&"radio"===e&&vt.nodeName(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(_t);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),xe={set:function(t,e,n){return e===!1?vt.removeAttr(t,n):t.setAttribute(n,n),n}},vt.each(vt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=be[e]||vt.find.attr;be[e]=function(t,e,i){var r,o,s=e.toLowerCase();return i||(o=be[s],be[s]=r,r=null!=n(t,e,i)?s:null,be[s]=o),r}});var we=/^(?:input|select|textarea|button)$/i,Ce=/^(?:a|area)$/i;vt.fn.extend({prop:function(t,e){return Ft(this,vt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[vt.propFix[t]||t]})}}),vt.extend({prop:function(t,e,n){var i,r,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&vt.isXMLDoc(t)||(e=vt.propFix[e]||e,r=vt.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=vt.find.attr(t,"tabindex");return e?parseInt(e,10):we.test(t.nodeName)||Ce.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),pt.optSelected||(vt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),vt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){vt.propFix[this.toLowerCase()]=this});var Se=/[\t\r\n\f]/g;vt.fn.extend({addClass:function(t){var e,n,i,r,o,s,a,l=0;if(vt.isFunction(t))return this.each(function(e){vt(this).addClass(t.call(this,e,V(this)))});if("string"==typeof t&&t)for(e=t.match(_t)||[];n=this[l++];)if(r=V(n),i=1===n.nodeType&&(" "+r+" ").replace(Se," ")){for(s=0;o=e[s++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");a=vt.trim(i),r!==a&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,o,s,a,l=0;if(vt.isFunction(t))return this.each(function(e){vt(this).removeClass(t.call(this,e,V(this)))});if(!arguments.length)return this.attr("class","");if("string"==typeof t&&t)for(e=t.match(_t)||[];n=this[l++];)if(r=V(n),i=1===n.nodeType&&(" "+r+" ").replace(Se," ")){for(s=0;o=e[s++];)for(;i.indexOf(" "+o+" ")>-1;)i=i.replace(" "+o+" "," ");a=vt.trim(i),r!==a&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t;return"boolean"==typeof e&&"string"===n?e?this.addClass(t):this.removeClass(t):vt.isFunction(t)?this.each(function(n){vt(this).toggleClass(t.call(this,n,V(this),e),e)}):this.each(function(){var e,i,r,o;if("string"===n)for(i=0,r=vt(this),o=t.match(_t)||[];e=o[i++];)r.hasClass(e)?r.removeClass(e):r.addClass(e);else(void 0===t||"boolean"===n)&&(e=V(this),e&&qt.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":qt.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+V(n)+" ").replace(Se," ").indexOf(e)>-1)return!0;return!1}});var Ee=/\r/g,Te=/[\x20\t\r\n\f]+/g;vt.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=vt.isFunction(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,vt(this).val()):t,null==r?r="":"number"==typeof r?r+="":vt.isArray(r)&&(r=vt.map(r,function(t){return null==t?"":t+""})),e=vt.valHooks[this.type]||vt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=vt.valHooks[r.type]||vt.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(Ee,""):null==n?"":n)}}}),vt.extend({valHooks:{option:{get:function(t){var e=vt.find.attr(t,"value");return null!=e?e:vt.trim(vt.text(t)).replace(Te," ")}},select:{get:function(t){for(var e,n,i=t.options,r=t.selectedIndex,o="select-one"===t.type,s=o?null:[],a=o?r+1:i.length,l=0>r?a:o?r:0;a>l;l++)if(n=i[l],(n.selected||l===r)&&!n.disabled&&(!n.parentNode.disabled||!vt.nodeName(n.parentNode,"optgroup"))){if(e=vt(n).val(),o)return e;s.push(e)}return s},set:function(t,e){for(var n,i,r=t.options,o=vt.makeArray(e),s=r.length;s--;)i=r[s],(i.selected=vt.inArray(vt.valHooks.option.get(i),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),vt.each(["radio","checkbox"],function(){vt.valHooks[this]={set:function(t,e){return vt.isArray(e)?t.checked=vt.inArray(vt(t).val(),e)>-1:void 0}},pt.checkOn||(vt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})});var De=/^(?:focusinfocus|focusoutblur)$/;vt.extend(vt.event,{trigger:function(t,e,i,r){var o,s,a,l,u,c,h,d=[i||it],f=ht.call(t,"type")?t.type:t,p=ht.call(t,"namespace")?t.namespace.split("."):[];if(s=a=i=i||it,3!==i.nodeType&&8!==i.nodeType&&!De.test(f+vt.event.triggered)&&(f.indexOf(".")>-1&&(p=f.split("."),f=p.shift(),p.sort()),u=f.indexOf(":")<0&&"on"+f,t=t[vt.expando]?t:new vt.Event(f,"object"==typeof t&&t),t.isTrigger=r?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:vt.makeArray(e,[t]),h=vt.event.special[f]||{},r||!h.trigger||h.trigger.apply(i,e)!==!1)){if(!r&&!h.noBubble&&!vt.isWindow(i)){for(l=h.delegateType||f,De.test(l+f)||(s=s.parentNode);s;s=s.parentNode)d.push(s),a=s;a===(i.ownerDocument||it)&&d.push(a.defaultView||a.parentWindow||n)}for(o=0;(s=d[o++])&&!t.isPropagationStopped();)t.type=o>1?l:h.bindType||f,c=(qt.get(s,"events")||{})[t.type]&&qt.get(s,"handle"),c&&c.apply(s,e),c=u&&s[u],c&&c.apply&&It(s)&&(t.result=c.apply(s,e),t.result===!1&&t.preventDefault());return t.type=f,r||t.isDefaultPrevented()||h._default&&h._default.apply(d.pop(),e)!==!1||!It(i)||u&&vt.isFunction(i[f])&&!vt.isWindow(i)&&(a=i[u],a&&(i[u]=null),vt.event.triggered=f,i[f](),vt.event.triggered=void 0,a&&(i[u]=a)),t.result}},simulate:function(t,e,n){var i=vt.extend(new vt.Event,n,{type:t,isSimulated:!0});vt.event.trigger(i,null,e)}}),vt.fn.extend({trigger:function(t,e){return this.each(function(){vt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];return n?vt.event.trigger(t,e,n,!0):void 0}}),vt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){vt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),vt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),pt.focusin="onfocusin"in n,pt.focusin||vt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){vt.event.simulate(e,t.target,vt.event.fix(t))};vt.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=qt.access(i,e);r||i.addEventListener(t,n,!0),qt.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=qt.access(i,e)-1;r?qt.access(i,e,r):(i.removeEventListener(t,n,!0),qt.remove(i,e))}}});var ke=n.location,Pe=vt.now(),Ae=/\?/;vt.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new n.DOMParser).parseFromString(t,"text/xml")}catch(i){e=void 0}return(!e||e.getElementsByTagName("parsererror").length)&&vt.error("Invalid XML: "+t),e};var Le=/\[\]$/,Ne=/\r?\n/g,_e=/^(?:submit|button|image|reset|file)$/i,je=/^(?:input|select|textarea|keygen)/i;vt.param=function(t,e){var n,i=[],r=function(t,e){var n=vt.isFunction(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(vt.isArray(t)||t.jquery&&!vt.isPlainObject(t))vt.each(t,function(){r(this.name,this.value)});else for(n in t)Y(n,t[n],e,r);return i.join("&")},vt.fn.extend({serialize:function(){return vt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=vt.prop(this,"elements");return t?vt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!vt(this).is(":disabled")&&je.test(this.nodeName)&&!_e.test(t)&&(this.checked||!Gt.test(t))}).map(function(t,e){var n=vt(this).val();return null==n?null:vt.isArray(n)?vt.map(n,function(t){return{name:e.name,value:t.replace(Ne,"\r\n")}}):{name:e.name,value:n.replace(Ne,"\r\n")}}).get()}});var Me=/%20/g,Fe=/#.*$/,Ie=/([?&])_=[^&]*/,qe=/^(.*?):[ \t]*([^\r\n]*)$/gm,He=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Oe=/^(?:GET|HEAD)$/,We=/^\/\//,Re={},ze={},Be="*/".concat("*"),Ue=it.createElement("a");Ue.href=ke.href,vt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke.href,type:"GET",isLocal:He.test(ke.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Be,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":vt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?K(K(t,vt.ajaxSettings),e):K(vt.ajaxSettings,t)},ajaxPrefilter:Q(Re),ajaxTransport:Q(ze),ajax:function(t,e){function i(t,e,i,a){var u,d,f,b,w,C=e;c||(c=!0,l&&n.clearTimeout(l),r=void 0,s=a||"",S.readyState=t>0?4:0,u=t>=200&&300>t||304===t,i&&(b=Z(p,S,i)),b=tt(p,b,S,u),u?(p.ifModified&&(w=S.getResponseHeader("Last-Modified"),w&&(vt.lastModified[o]=w),w=S.getResponseHeader("etag"),w&&(vt.etag[o]=w)),204===t||"HEAD"===p.type?C="nocontent":304===t?C="notmodified":(C=b.state,d=b.data,f=b.error,u=!f)):(f=C,(t||!C)&&(C="error",0>t&&(t=0))),S.status=t,S.statusText=(e||C)+"",u?m.resolveWith(g,[d,C,S]):m.rejectWith(g,[S,C,f]),S.statusCode(x),x=void 0,h&&v.trigger(u?"ajaxSuccess":"ajaxError",[S,p,u?d:f]),y.fireWith(g,[S,C]),h&&(v.trigger("ajaxComplete",[S,p]),--vt.active||vt.event.trigger("ajaxStop")))}"object"==typeof t&&(e=t,t=void 0),e=e||{};var r,o,s,a,l,u,c,h,d,f,p=vt.ajaxSetup({},e),g=p.context||p,v=p.context&&(g.nodeType||g.jquery)?vt(g):vt.event,m=vt.Deferred(),y=vt.Callbacks("once memory"),x=p.statusCode||{},b={},w={},C="canceled",S={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=qe.exec(s);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(t,e){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,b[t]=e),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)S.always(t[S.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||C;return r&&r.abort(e),i(0,e),this}};if(m.promise(S),p.url=((t||p.url||ke.href)+"").replace(We,ke.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(_t)||[""],null==p.crossDomain){u=it.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Ue.protocol+"//"+Ue.host!=u.protocol+"//"+u.host}catch(E){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=vt.param(p.data,p.traditional)),J(Re,p,e,S),c)return S;h=vt.event&&p.global,h&&0===vt.active++&&vt.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Oe.test(p.type),o=p.url.replace(Fe,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Me,"+")):(f=p.url.slice(o.length),p.data&&(o+=(Ae.test(o)?"&":"?")+p.data,delete p.data),p.cache===!1&&(o=o.replace(Ie,""),f=(Ae.test(o)?"&":"?")+"_="+Pe++ +f),p.url=o+f),p.ifModified&&(vt.lastModified[o]&&S.setRequestHeader("If-Modified-Since",vt.lastModified[o]),vt.etag[o]&&S.setRequestHeader("If-None-Match",vt.etag[o])),(p.data&&p.hasContent&&p.contentType!==!1||e.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Be+"; q=0.01":""):p.accepts["*"]);for(d in p.headers)S.setRequestHeader(d,p.headers[d]);if(p.beforeSend&&(p.beforeSend.call(g,S,p)===!1||c))return S.abort();if(C="abort",y.add(p.complete),S.done(p.success),S.fail(p.error),r=J(ze,p,e,S)){if(S.readyState=1,h&&v.trigger("ajaxSend",[S,p]),c)return S;p.async&&p.timeout>0&&(l=n.setTimeout(function(){S.abort("timeout")},p.timeout));try{c=!1,r.send(b,i)}catch(E){if(c)throw E;i(-1,E)}}else i(-1,"No Transport");return S},getJSON:function(t,e,n){return vt.get(t,e,n,"json")},getScript:function(t,e){return vt.get(t,void 0,e,"script")}}),vt.each(["get","post"],function(t,e){vt[e]=function(t,n,i,r){return vt.isFunction(n)&&(r=r||i,i=n,n=void 0),vt.ajax(vt.extend({url:t,type:e,dataType:r,data:n,success:i},vt.isPlainObject(t)&&t))}}),vt._evalUrl=function(t){return vt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},vt.fn.extend({wrapAll:function(t){var e;return this[0]&&(vt.isFunction(t)&&(t=t.call(this[0])),e=vt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return vt.isFunction(t)?this.each(function(e){vt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=vt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=vt.isFunction(t);return this.each(function(n){vt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){vt(this).replaceWith(this.childNodes)}),this}}),vt.expr.pseudos.hidden=function(t){return!vt.expr.pseudos.visible(t)},vt.expr.pseudos.visible=function(t){
return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},vt.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(t){}};var $e={0:200,1223:204},Xe=vt.ajaxSettings.xhr();pt.cors=!!Xe&&"withCredentials"in Xe,pt.ajax=Xe=!!Xe,vt.ajaxTransport(function(t){var e,i;return pt.cors||Xe&&!t.crossDomain?{send:function(r,o){var s,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(s in t.xhrFields)a[s]=t.xhrFields[s];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(s in r)a.setRequestHeader(s,r[s]);e=function(t){return function(){e&&(e=i=a.onload=a.onerror=a.onabort=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o($e[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=e(),i=a.onerror=e("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){e&&i()})},e=e("abort");try{a.send(t.hasContent&&t.data||null)}catch(l){if(e)throw l}},abort:function(){e&&e()}}:void 0}),vt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),vt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return vt.globalEval(t),t}}}),vt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),vt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=vt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),it.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ge=[],Ve=/(=)\?(?=&|$)|\?\?/;vt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ge.pop()||vt.expando+"_"+Pe++;return this[t]=!0,t}}),vt.ajaxPrefilter("json jsonp",function(t,e,i){var r,o,s,a=t.jsonp!==!1&&(Ve.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ve.test(t.data)&&"data");return a||"jsonp"===t.dataTypes[0]?(r=t.jsonpCallback=vt.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Ve,"$1"+r):t.jsonp!==!1&&(t.url+=(Ae.test(t.url)?"&":"?")+t.jsonp+"="+r),t.converters["script json"]=function(){return s||vt.error(r+" was not called"),s[0]},t.dataTypes[0]="json",o=n[r],n[r]=function(){s=arguments},i.always(function(){void 0===o?vt(n).removeProp(r):n[r]=o,t[r]&&(t.jsonpCallback=e.jsonpCallback,Ge.push(r)),s&&vt.isFunction(o)&&o(s[0]),s=o=void 0}),"script"):void 0}),pt.createHTMLDocument=function(){var t=it.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),vt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,r,o;return e||(pt.createHTMLDocument?(e=it.implementation.createHTMLDocument(""),i=e.createElement("base"),i.href=it.location.href,e.head.appendChild(i)):e=it),r=Tt.exec(t),o=!n&&[],r?[e.createElement(r[1])]:(r=C([t],e,o),o&&o.length&&vt(o).remove(),vt.merge([],r.childNodes))},vt.fn.load=function(t,e,n){var i,r,o,s=this,a=t.indexOf(" ");return a>-1&&(i=vt.trim(t.slice(a)),t=t.slice(0,a)),vt.isFunction(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),s.length>0&&vt.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){o=arguments,s.html(i?vt("<div>").append(vt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){s.each(function(){n.apply(this,o||[t.responseText,e,t])})}),this},vt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){vt.fn[e]=function(t){return this.on(e,t)}}),vt.expr.pseudos.animated=function(t){return vt.grep(vt.timers,function(e){return t===e.elem}).length},vt.offset={setOffset:function(t,e,n){var i,r,o,s,a,l,u,c=vt.css(t,"position"),h=vt(t),d={};"static"===c&&(t.style.position="relative"),a=h.offset(),o=vt.css(t,"top"),l=vt.css(t,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(i=h.position(),s=i.top,r=i.left):(s=parseFloat(o)||0,r=parseFloat(l)||0),vt.isFunction(e)&&(e=e.call(t,n,vt.extend({},a))),null!=e.top&&(d.top=e.top-a.top+s),null!=e.left&&(d.left=e.left-a.left+r),"using"in e?e.using.call(t,d):h.css(d)}},vt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){vt.offset.setOffset(this,t,e)});var e,n,i,r,o=this[0];if(o)return o.getClientRects().length?(i=o.getBoundingClientRect(),i.width||i.height?(r=o.ownerDocument,n=et(r),e=r.documentElement,{top:i.top+n.pageYOffset-e.clientTop,left:i.left+n.pageXOffset-e.clientLeft}):i):{top:0,left:0}},position:function(){if(this[0]){var t,e,n=this[0],i={top:0,left:0};return"fixed"===vt.css(n,"position")?e=n.getBoundingClientRect():(t=this.offsetParent(),e=this.offset(),vt.nodeName(t[0],"html")||(i=t.offset()),i={top:i.top+vt.css(t[0],"borderTopWidth",!0),left:i.left+vt.css(t[0],"borderLeftWidth",!0)}),{top:e.top-i.top-vt.css(n,"marginTop",!0),left:e.left-i.left-vt.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===vt.css(t,"position");)t=t.offsetParent;return t||Kt})}}),vt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;vt.fn[t]=function(i){return Ft(this,function(t,i,r){var o=et(t);return void 0===r?o?o[e]:t[i]:void(o?o.scrollTo(n?o.pageXOffset:r,n?r:o.pageYOffset):t[i]=r)},t,i,arguments.length)}}),vt.each(["top","left"],function(t,e){vt.cssHooks[e]=F(pt.pixelPosition,function(t,n){return n?(n=M(t,e),le.test(n)?vt(t).position()[e]+"px":n):void 0})}),vt.each({Height:"height",Width:"width"},function(t,e){vt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){vt.fn[i]=function(r,o){var s=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||o===!0?"margin":"border");return Ft(this,function(e,n,r){var o;return vt.isWindow(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===r?vt.css(e,n,a):vt.style(e,n,r,a)},e,s?r:void 0,s)}})}),vt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),vt.parseJSON=JSON.parse,i=[],r=function(){return vt}.apply(e,i),!(void 0!==r&&(t.exports=r));var Ye=n.jQuery,Qe=n.$;return vt.noConflict=function(t){return n.$===vt&&(n.$=Qe),t&&n.jQuery===vt&&(n.jQuery=Ye),vt},o||(n.jQuery=n.$=vt),vt})},function(t,e,n){var i;/*!
	 * getSize v2.0.2
	 * measure size of elements
	 * MIT license
	 */
!function(r,o){"use strict";i=function(){return o()}.call(e,n,e,t),!(void 0!==i&&(t.exports=i))}(window,function(){"use strict";function t(t){var e=parseFloat(t),n=-1==t.indexOf("%")&&!isNaN(e);return n&&e}function e(){}function n(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;u>e;e++){var n=l[e];t[n]=0}return t}function i(t){var e=getComputedStyle(t);return e||a("Style returned "+e+". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"),e}function r(){if(!c){c=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var n=document.body||document.documentElement;n.appendChild(e);var r=i(e);o.isBoxSizeOuter=s=200==t(r.width),n.removeChild(e)}}function o(e){if(r(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var o=i(e);if("none"==o.display)return n();var a={};a.width=e.offsetWidth,a.height=e.offsetHeight;for(var c=a.isBorderBox="border-box"==o.boxSizing,h=0;u>h;h++){var d=l[h],f=o[d],p=parseFloat(f);a[d]=isNaN(p)?0:p}var g=a.paddingLeft+a.paddingRight,v=a.paddingTop+a.paddingBottom,m=a.marginLeft+a.marginRight,y=a.marginTop+a.marginBottom,x=a.borderLeftWidth+a.borderRightWidth,b=a.borderTopWidth+a.borderBottomWidth,w=c&&s,C=t(o.width);C!==!1&&(a.width=C+(w?0:g+x));var S=t(o.height);return S!==!1&&(a.height=S+(w?0:v+b)),a.innerWidth=a.width-(g+x),a.innerHeight=a.height-(v+b),a.outerWidth=a.width+m,a.outerHeight=a.height+y,a}}var s,a="undefined"==typeof console?e:function(t){console.error(t)},l=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],u=l.length,c=!1;return o})},function(t,e,n){var i,r;/*!
	 * Tap listener v2.0.0
	 * listens to taps
	 * MIT license
	 */
!function(o,s){i=[n(7)],r=function(t){return s(o,t)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e){"use strict";function n(t){this.bindTap(t)}var i=n.prototype=Object.create(e.prototype);return i.bindTap=function(t){t&&(this.unbindTap(),this.tapElement=t,this._bindStartEvent(t,!0))},i.unbindTap=function(){this.tapElement&&(this._bindStartEvent(this.tapElement,!0),delete this.tapElement)},i.pointerUp=function(n,i){if(!this.isIgnoringMouseUp||"mouseup"!=n.type){var r=e.getPointerPoint(i),o=this.tapElement.getBoundingClientRect(),s=t.pageXOffset,a=t.pageYOffset,l=r.x>=o.left+s&&r.x<=o.right+s&&r.y>=o.top+a&&r.y<=o.bottom+a;if(l&&this.emitEvent("tap",[n,i]),"mouseup"!=n.type){this.isIgnoringMouseUp=!0;var u=this;setTimeout(function(){delete u.isIgnoringMouseUp},400)}}},i.destroy=function(){this.pointerDone(),this.unbindTap()},n})},function(t,e,n){var i,r;/*!
	 * Unipointer v2.1.0
	 * base class for doing one thing with pointer event
	 * MIT license
	 */
!function(o,s){i=[n(3)],r=function(t){return s(o,t)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e){"use strict";function n(){}function i(){}var r=i.prototype=Object.create(e.prototype);r.bindStartEvent=function(t){this._bindStartEvent(t,!0)},r.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},r._bindStartEvent=function(e,n){n=void 0===n?!0:!!n;var i=n?"addEventListener":"removeEventListener";t.navigator.pointerEnabled?e[i]("pointerdown",this):t.navigator.msPointerEnabled?e[i]("MSPointerDown",this):(e[i]("mousedown",this),e[i]("touchstart",this))},r.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},r.getTouch=function(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.identifier==this.pointerIdentifier)return n}},r.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},r.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},r.onMSPointerDown=r.onpointerdown=function(t){this._pointerDown(t,t)},r._pointerDown=function(t,e){this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},r.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var o={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"],MSPointerDown:["MSPointerMove","MSPointerUp","MSPointerCancel"]};return r._bindPostStartEvents=function(e){if(e){var n=o[e.type];n.forEach(function(e){t.addEventListener(e,this)},this),this._boundPointerEvents=n}},r._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach(function(e){t.removeEventListener(e,this)},this),delete this._boundPointerEvents)},r.onmousemove=function(t){this._pointerMove(t,t)},r.onMSPointerMove=r.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},r.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},r._pointerMove=function(t,e){this.pointerMove(t,e)},r.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},r.onmouseup=function(t){this._pointerUp(t,t)},r.onMSPointerUp=r.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},r.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},r._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},r.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},r._pointerDone=function(){this.isPointerDown=!1,delete this.pointerIdentifier,this._unbindPostStartEvents(),this.pointerDone()},r.pointerDone=n,r.onMSPointerCancel=r.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},r.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},r._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},r.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},i.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},i})},function(t,e,n){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}(),s=n(4),a=i(s),l=function(){function t(e){r(this,t),this.element=(0,a["default"])(e),this.win=(0,a["default"])(window),this.eltop=this.element.offset().top}return o(t,[{key:"init",value:function(){this.bindEvents()}},{key:"bindEvents",value:function(){var t=this;this.win.on("scroll",function(e){t.handleScroll(e)})}},{key:"handleScroll",value:function(t){var e=this.win.scrollTop();if(e>=this.eltop){var n=e-this.eltop;this.setPosition(n)}else this.setPosition(0)}},{key:"setPosition",value:function(t){this.element.css({transform:"translateY("+t+"px)"})}}]),t}();e["default"]=l},function(t,e,n){var i,r;!function(o,s){"use strict";i=s,r="function"==typeof i?i.call(e,n,e,t):i,!(void 0!==r&&(t.exports=r))}(window,function(){"use strict";var t=function(){var t=Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],n=0;n<e.length;n++){var i=e[n],r=i+"MatchesSelector";if(t[r])return r}}();return function(e,n){return e[t](n)}})},function(t,e,n){var i,r;!function(o,s){i=[n(2),n(1)],r=function(t,e){return s(o,t,e)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n){"use strict";function i(t){var e=document.createDocumentFragment();return t.forEach(function(t){e.appendChild(t.element)}),e}var r=e.prototype;return r.insert=function(t,e){var n=this._makeCells(t);if(n&&n.length){var r=this.cells.length;e=void 0===e?r:e;var o=i(n),s=e==r;if(s)this.slider.appendChild(o);else{var a=this.cells[e].element;this.slider.insertBefore(o,a)}if(0===e)this.cells=n.concat(this.cells);else if(s)this.cells=this.cells.concat(n);else{var l=this.cells.splice(e,r-e);this.cells=this.cells.concat(n).concat(l)}this._sizeCells(n);var u=e>this.selectedIndex?0:n.length;this._cellAddedRemoved(e,u)}},r.append=function(t){this.insert(t,this.cells.length)},r.prepend=function(t){this.insert(t,0)},r.remove=function(t){var e,i,r=this.getCells(t),o=0,s=r.length;for(e=0;s>e;e++){i=r[e];var a=this.cells.indexOf(i)<this.selectedIndex;o-=a?1:0}for(e=0;s>e;e++)i=r[e],i.remove(),n.removeFrom(this.cells,i);r.length&&this._cellAddedRemoved(0,o)},r._cellAddedRemoved=function(t,e){e=e||0,this.selectedIndex+=e,this.selectedIndex=Math.max(0,Math.min(this.slides.length-1,this.selectedIndex)),this.cellChange(t,!0),this.emitEvent("cellAddedRemoved",[t,e])},r.cellSizeChange=function(t){var e=this.getCell(t);if(e){e.getSize();var n=this.cells.indexOf(e);this.cellChange(n)}},r.cellChange=function(t,e){var n=this.slideableWidth;if(this._positionCells(t),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("cellChange",[t]),this.options.freeScroll){var i=n-this.slideableWidth;this.x+=i*this.cellAlign,this.positionSlider()}else e&&this.positionSliderAtSelected(),this.select(this.selectedIndex)},e})},function(t,e,n){var i,r;!function(o,s){i=[n(1)],r=function(t){return s(o,t)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e){"use strict";var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,i=0;n||(n=function(t){var e=(new Date).getTime(),n=Math.max(0,16-(e-i)),r=setTimeout(t,n);return i=e+n,r});var r={};r.startAnimation=function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},r.animate=function(){this.applyDragForce(),this.applySelectedAttraction();var t=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(t),this.isAnimating){var e=this;n(function(){e.animate()})}};var o=function(){var t=document.documentElement.style;return"string"==typeof t.transform?"transform":"WebkitTransform"}();return r.positionSlider=function(){var t=this.x;this.options.wrapAround&&this.cells.length>1&&(t=e.modulo(t,this.slideableWidth),t-=this.slideableWidth,this.shiftWrapCells(t)),t+=this.cursorPosition,t=this.options.rightToLeft&&o?-t:t;var n=this.getPositionValue(t);this.slider.style[o]=this.isAnimating?"translate3d("+n+",0,0)":"translateX("+n+")";var i=this.slides[0];if(i){var r=-this.x-i.target,s=r/this.slidesWidth;this.dispatchEvent("scroll",null,[s,r])}},r.positionSliderAtSelected=function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.positionSlider())},r.getPositionValue=function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},r.settle=function(t){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*t)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle"))},r.shiftWrapCells=function(t){var e=this.cursorPosition+t;this._shiftCells(this.beforeShiftCells,e,-1);var n=this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,n,1)},r._shiftCells=function(t,e,n){for(var i=0;i<t.length;i++){var r=t[i],o=e>0?n:0;r.wrapShift(o),e-=r.size.outerWidth}},r._unshiftCells=function(t){if(t&&t.length)for(var e=0;e<t.length;e++)t[e].wrapShift(0)},r.integratePhysics=function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},r.applyForce=function(t){this.velocity+=t},r.getFrictionFactor=function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},r.getRestingPosition=function(){return this.x+this.velocity/(1-this.getFrictionFactor())},r.applyDragForce=function(){if(this.isPointerDown){var t=this.dragX-this.x,e=t-this.velocity;this.applyForce(e)}},r.applySelectedAttraction=function(){if(!this.isPointerDown&&!this.isFreeScrolling&&this.cells.length){var t=-1*this.selectedSlide.target-this.x,e=t*this.options.selectedAttraction;this.applyForce(e)}},r})},function(t,e,n){var i,r;!function(o,s){i=[n(5)],r=function(t){return s(o,t)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e){"use strict";function n(t,e){this.element=t,this.parent=e,this.create()}var i=n.prototype;return i.create=function(){this.element.style.position="absolute",this.x=0,this.shift=0},i.destroy=function(){this.element.style.position="";var t=this.parent.originSide;this.element.style[t]=""},i.getSize=function(){this.size=e(this.element)},i.setPosition=function(t){this.x=t,this.updateTarget(),this.renderPosition(t)},i.updateTarget=i.setDefaultTarget=function(){var t="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[t]+this.size.width*this.parent.cellAlign},i.renderPosition=function(t){var e=this.parent.originSide;this.element.style[e]=this.parent.getPositionValue(t)},i.wrapShift=function(t){this.shift=t,this.renderPosition(this.x+this.parent.slideableWidth*t)},i.remove=function(){this.element.parentNode.removeChild(this.element)},n})},function(t,e,n){var i,r;!function(o,s){i=[n(2),n(20),n(1)],r=function(t,e,n){return s(o,t,e,n)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n,i){"use strict";function r(){return{x:t.pageXOffset,y:t.pageYOffset}}i.extend(e.defaults,{draggable:!0,dragThreshold:3}),e.createMethods.push("_createDrag");var o=e.prototype;i.extend(o,n.prototype),o._createDrag=function(){this.on("activate",this.bindDrag),this.on("uiChange",this._uiChangeDrag),this.on("childUIPointerDown",this._childUIPointerDownDrag),this.on("deactivate",this.unbindDrag)},o.bindDrag=function(){this.options.draggable&&!this.isDragBound&&(this.element.classList.add("is-draggable"),this.handles=[this.viewport],this.bindHandles(),this.isDragBound=!0)},o.unbindDrag=function(){this.isDragBound&&(this.element.classList.remove("is-draggable"),this.unbindHandles(),delete this.isDragBound)},o._uiChangeDrag=function(){delete this.isFreeScrolling},o._childUIPointerDownDrag=function(t){t.preventDefault(),this.pointerDownFocus(t)};var s={TEXTAREA:!0,INPUT:!0,OPTION:!0},a={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};o.pointerDown=function(e,n){var i=s[e.target.nodeName]&&!a[e.target.type];if(i)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(e,n);var o=document.activeElement;o&&o.blur&&o!=this.element&&o!=document.body&&o.blur(),this.pointerDownFocus(e),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this._bindPostStartEvents(e),this.pointerDownScroll=r(),t.addEventListener("scroll",this),this.dispatchEvent("pointerDown",e,[n])};var l={touchstart:!0,MSPointerDown:!0},u={INPUT:!0,SELECT:!0};return o.pointerDownFocus=function(e){if(this.options.accessibility&&!l[e.type]&&!u[e.target.nodeName]){var n=t.pageYOffset;this.element.focus(),t.pageYOffset!=n&&t.scrollTo(t.pageXOffset,n)}},o.canPreventDefaultOnPointerDown=function(t){var e="touchstart"==t.type,n=t.target.nodeName;return!e&&"SELECT"!=n},o.hasDragStarted=function(t){return Math.abs(t.x)>this.options.dragThreshold},o.pointerUp=function(t,e){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",t,[e]),this._dragPointerUp(t,e)},o.pointerDone=function(){t.removeEventListener("scroll",this),delete this.pointerDownScroll},o.dragStart=function(t,e){this.dragStartPosition=this.x,this.startAnimation(),this.dispatchEvent("dragStart",t,[e])},o.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.dispatchEvent("pointerMove",t,[e,n]),this._dragMove(t,e,n)},o.dragMove=function(t,e,n){t.preventDefault(),this.previousDragX=this.dragX;var i=this.options.rightToLeft?-1:1,r=this.dragStartPosition+n.x*i;if(!this.options.wrapAround&&this.slides.length){var o=Math.max(-this.slides[0].target,this.dragStartPosition);r=r>o?.5*(r+o):r;var s=Math.min(-this.getLastSlide().target,this.dragStartPosition);r=s>r?.5*(r+s):r}this.dragX=r,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",t,[e,n])},o.dragEnd=function(t,e){this.options.freeScroll&&(this.isFreeScrolling=!0);var n=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var i=this.getRestingPosition();this.isFreeScrolling=-i>this.slides[0].target&&-i<this.getLastSlide().target}else this.options.freeScroll||n!=this.selectedIndex||(n+=this.dragEndBoostSelect());delete this.previousDragX,this.isDragSelect=this.options.wrapAround,this.select(n),delete this.isDragSelect,this.dispatchEvent("dragEnd",t,[e])},o.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getSlideDistance(-t,this.selectedIndex)),n=this._getClosestResting(t,e,1),i=this._getClosestResting(t,e,-1),r=n.distance<i.distance?n.index:i.index;return r},o._getClosestResting=function(t,e,n){for(var i=this.selectedIndex,r=1/0,o=this.options.contain&&!this.options.wrapAround?function(t,e){return e>=t}:function(t,e){return e>t};o(e,r)&&(i+=n,r=e,e=this.getSlideDistance(-t,i),null!==e);)e=Math.abs(e);return{distance:r,index:i-n}},o.getSlideDistance=function(t,e){var n=this.slides.length,r=this.options.wrapAround&&n>1,o=r?i.modulo(e,n):e,s=this.slides[o];if(!s)return null;var a=r?this.slideableWidth*Math.floor(e/n):0;return t-(s.target+a)},o.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var t=this.getSlideDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX;return t>0&&e>0?1:0>t&&0>e?-1:0},o.staticClick=function(t,e){var n=this.getParentCell(t.target),i=n&&n.element,r=n&&this.cells.indexOf(n);this.dispatchEvent("staticClick",t,[e,i,r])},o.onscroll=function(){var t=r(),e=this.pointerDownScroll.x-t.x,n=this.pointerDownScroll.y-t.y;(Math.abs(e)>3||Math.abs(n)>3)&&this._pointerDone()},e})},function(t,e,n){var i,r,o;/*!
	 * Flickity v2.0.3
	 * Touch, responsive, flickable carousels
	 *
	 * Licensed GPLv3 for open source use
	 * or Flickity Commercial License for commercial use
	 *
	 * http://flickity.metafizzy.co
	 * Copyright 2016 Metafizzy
	 */
!function(s,a){r=[n(2),n(13),n(18),n(16),n(17),n(10),n(15)],i=a,o="function"==typeof i?i.apply(e,r):i,!(void 0!==o&&(t.exports=o))}(window,function(t){return t})},function(t,e,n){var i,r;!function(o,s){i=[n(2),n(1)],r=function(t,e){return s(o,t,e)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n){"use strict";function i(t){if("IMG"==t.nodeName&&t.getAttribute("data-flickity-lazyload"))return[t];var e=t.querySelectorAll("img[data-flickity-lazyload]");return n.makeArray(e)}function r(t,e){this.img=t,this.flickity=e,this.load()}e.createMethods.push("_createLazyload");var o=e.prototype;return o._createLazyload=function(){this.on("select",this.lazyLoad)},o.lazyLoad=function(){var t=this.options.lazyLoad;if(t){var e="number"==typeof t?t:0,n=this.getAdjacentCellElements(e),o=[];n.forEach(function(t){var e=i(t);o=o.concat(e)}),o.forEach(function(t){new r(t,this)},this)}},r.prototype.handleEvent=n.handleEvent,r.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this),this.img.src=this.img.getAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload")},r.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},r.prototype.onerror=function(t){this.complete(t,"flickity-lazyerror")},r.prototype.complete=function(t,e){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this);var n=this.flickity.getParentCell(this.img),i=n&&n.element;this.flickity.cellSizeChange(i),this.img.classList.add(e),this.flickity.dispatchEvent("lazyLoad",t,i)},e.LazyLoader=r,e})},function(t,e,n){var i,r;!function(o,s){i=[n(2),n(6),n(1)],r=function(t,e,n){return s(o,t,e,n)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n,i){"use strict";function r(t){this.parent=t,this._create()}r.prototype=new n,r.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",this.dots=[],this.on("tap",this.onTap)},r.prototype.activate=function(){this.setDots(),this.bindTap(this.holder),this.parent.element.appendChild(this.holder)},r.prototype.deactivate=function(){this.parent.element.removeChild(this.holder),n.prototype.destroy.call(this)},r.prototype.setDots=function(){var t=this.parent.slides.length-this.dots.length;t>0?this.addDots(t):0>t&&this.removeDots(-t)},r.prototype.addDots=function(t){for(var e=document.createDocumentFragment(),n=[];t;){var i=document.createElement("li");i.className="dot",e.appendChild(i),n.push(i),t--}this.holder.appendChild(e),this.dots=this.dots.concat(n)},r.prototype.removeDots=function(t){var e=this.dots.splice(this.dots.length-t,t);e.forEach(function(t){this.holder.removeChild(t)},this)},r.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot"),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected")},r.prototype.onTap=function(t){var e=t.target;if("LI"==e.nodeName){this.parent.uiChange();var n=this.dots.indexOf(e);this.parent.select(n)}},r.prototype.destroy=function(){this.deactivate()},e.PageDots=r,i.extend(e.defaults,{pageDots:!0}),e.createMethods.push("_createPageDots");var o=e.prototype;return o._createPageDots=function(){this.options.pageDots&&(this.pageDots=new r(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots),this.pageDots.on("pointerDown",function(t){this.childUIPointerDown(t)}.bind(this)))},o.activatePageDots=function(){this.pageDots.activate()},o.updateSelectedPageDots=function(){this.pageDots.updateSelected()},o.updatePageDots=function(){this.pageDots.setDots()},o.deactivatePageDots=function(){this.pageDots.deactivate()},e.PageDots=r,e})},function(t,e,n){var i,r;!function(o,s){i=[n(3),n(1),n(2)],r=function(t,e,n){return s(t,e,n)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n){"use strict";function i(t){this.parent=t,this.state="stopped",o&&(this.onVisibilityChange=function(){this.visibilityChange()}.bind(this),this.onVisibilityPlay=function(){this.visibilityPlay()}.bind(this))}var r,o;"hidden"in document?(r="hidden",o="visibilitychange"):"webkitHidden"in document&&(r="webkitHidden",o="webkitvisibilitychange"),i.prototype=Object.create(t.prototype),i.prototype.play=function(){if("playing"!=this.state){var t=document[r];if(o&&t)return void document.addEventListener(o,this.onVisibilityPlay);this.state="playing",o&&document.addEventListener(o,this.onVisibilityChange),this.tick()}},i.prototype.tick=function(){if("playing"==this.state){var t=this.parent.options.autoPlay;t="number"==typeof t?t:3e3;var e=this;this.clear(),this.timeout=setTimeout(function(){e.parent.next(!0),e.tick()},t)}},i.prototype.stop=function(){this.state="stopped",this.clear(),o&&document.removeEventListener(o,this.onVisibilityChange)},i.prototype.clear=function(){clearTimeout(this.timeout)},i.prototype.pause=function(){"playing"==this.state&&(this.state="paused",this.clear())},i.prototype.unpause=function(){"paused"==this.state&&this.play()},i.prototype.visibilityChange=function(){var t=document[r];this[t?"pause":"unpause"]()},i.prototype.visibilityPlay=function(){this.play(),document.removeEventListener(o,this.onVisibilityPlay)},e.extend(n.defaults,{pauseAutoPlayOnHover:!0}),n.createMethods.push("_createPlayer");var s=n.prototype;return s._createPlayer=function(){this.player=new i(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},s.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},s.playPlayer=function(){this.player.play()},s.stopPlayer=function(){this.player.stop()},s.pausePlayer=function(){this.player.pause()},s.unpausePlayer=function(){this.player.unpause()},s.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},s.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},s.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},n.Player=i,n})},function(t,e,n){var i,r;!function(o,s){i=[n(2),n(6),n(1)],r=function(t,e,n){return s(o,t,e,n)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e,n,i){"use strict";function r(t,e){this.direction=t,this.parent=e,this._create()}function o(t){return"string"==typeof t?t:"M "+t.x0+",50 L "+t.x1+","+(t.y1+50)+" L "+t.x2+","+(t.y2+50)+" L "+t.x3+",50  L "+t.x2+","+(50-t.y2)+" L "+t.x1+","+(50-t.y1)+" Z"}var s="http://www.w3.org/2000/svg";r.prototype=new n,r.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var t=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==t;var e=this.element=document.createElement("button");e.className="flickity-prev-next-button",e.className+=this.isPrevious?" previous":" next",e.setAttribute("type","button"),this.disable(),e.setAttribute("aria-label",this.isPrevious?"previous":"next");var n=this.createSVG();e.appendChild(n),this.parent.on("select",function(){this.update()}.bind(this)),this.on("tap",this.onTap),this.on("pointerDown",function(t,e){this.parent.childUIPointerDown(e)}.bind(this))},r.prototype.activate=function(){this.bindTap(this.element),this.element.addEventListener("click",this),this.parent.element.appendChild(this.element)},r.prototype.deactivate=function(){this.parent.element.removeChild(this.element),n.prototype.destroy.call(this),this.element.removeEventListener("click",this)},r.prototype.createSVG=function(){var t=document.createElementNS(s,"svg");t.setAttribute("viewBox","0 0 100 100");var e=document.createElementNS(s,"path"),n=o(this.parent.options.arrowShape);return e.setAttribute("d",n),e.setAttribute("class","arrow"),this.isLeft||e.setAttribute("transform","translate(100, 100) rotate(180) "),t.appendChild(e),t},r.prototype.onTap=function(){if(this.isEnabled){this.parent.uiChange();var t=this.isPrevious?"previous":"next";this.parent[t]()}},r.prototype.handleEvent=i.handleEvent,r.prototype.onclick=function(){var t=document.activeElement;t&&t==this.element&&this.onTap()},r.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},r.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},r.prototype.update=function(){var t=this.parent.slides;if(this.parent.options.wrapAround&&t.length>1)return void this.enable();var e=t.length?t.length-1:0,n=this.isPrevious?0:e,i=this.parent.selectedIndex==n?"disable":"enable";this[i]()},r.prototype.destroy=function(){this.deactivate()},i.extend(e.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),e.createMethods.push("_createPrevNextButtons");var a=e.prototype;return a._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new r(-1,this),this.nextButton=new r(1,this),this.on("activate",this.activatePrevNextButtons))},a.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},a.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},e.PrevNextButton=r,e})},function(t,e,n){var i,r;!function(o,s){i=s,r="function"==typeof i?i.call(e,n,e,t):i,!(void 0!==r&&(t.exports=r))}(window,function(){"use strict";function t(t){this.parent=t,this.isOriginLeft="left"==t.originSide,this.cells=[],this.outerWidth=0,this.height=0}var e=t.prototype;return e.addCell=function(t){if(this.cells.push(t),this.outerWidth+=t.size.outerWidth,this.height=Math.max(t.size.outerHeight,this.height),1==this.cells.length){this.x=t.x;var e=this.isOriginLeft?"marginLeft":"marginRight";this.firstMargin=t.size[e]}},e.updateTarget=function(){var t=this.isOriginLeft?"marginRight":"marginLeft",e=this.getLastCell(),n=e?e.size[t]:0,i=this.outerWidth-(this.firstMargin+n);this.target=this.x+this.firstMargin+i*this.parent.cellAlign},e.getLastCell=function(){return this.cells[this.cells.length-1]},e.select=function(){this.changeSelectedClass("add")},e.unselect=function(){this.changeSelectedClass("remove")},e.changeSelectedClass=function(t){this.cells.forEach(function(e){e.element.classList[t]("is-selected")})},e.getCellElements=function(){return this.cells.map(function(t){return t.element})},t})},function(t,e,n){var i,r;/*!
	 * Unidragger v2.1.0
	 * Draggable base class
	 * MIT license
	 */
!function(o,s){i=[n(7)],r=function(t){return s(o,t)}.apply(e,i),!(void 0!==r&&(t.exports=r))}(window,function(t,e){"use strict";function n(){}function i(){}var r=i.prototype=Object.create(e.prototype);r.bindHandles=function(){this._bindHandles(!0)},r.unbindHandles=function(){this._bindHandles(!1)};var o=t.navigator;return r._bindHandles=function(t){t=void 0===t?!0:!!t;var e;e=o.pointerEnabled?function(e){e.style.touchAction=t?"none":""}:o.msPointerEnabled?function(e){e.style.msTouchAction=t?"none":""}:n;for(var i=t?"addEventListener":"removeEventListener",r=0;r<this.handles.length;r++){var s=this.handles[r];this._bindStartEvent(s,t),e(s),s[i]("click",this)}},r.pointerDown=function(t,e){if("INPUT"==t.target.nodeName&&"range"==t.target.type)return this.isPointerDown=!1,void delete this.pointerIdentifier;this._dragPointerDown(t,e);var n=document.activeElement;n&&n.blur&&n.blur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])},r._dragPointerDown=function(t,n){this.pointerDownPoint=e.getPointerPoint(n);var i=this.canPreventDefaultOnPointerDown(t,n);i&&t.preventDefault()},r.canPreventDefaultOnPointerDown=function(t){return"SELECT"!=t.target.nodeName},r.pointerMove=function(t,e){var n=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,n]),this._dragMove(t,e,n)},r._dragPointerMove=function(t,n){var i=e.getPointerPoint(n),r={x:i.x-this.pointerDownPoint.x,y:i.y-this.pointerDownPoint.y};return!this.isDragging&&this.hasDragStarted(r)&&this._dragStart(t,n),r},r.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},r.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},r._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},r._dragStart=function(t,n){this.isDragging=!0,this.dragStartPoint=e.getPointerPoint(n),this.isPreventingClicks=!0,this.dragStart(t,n)},r.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},r._dragMove=function(t,e,n){this.isDragging&&this.dragMove(t,e,n)},r.dragMove=function(t,e,n){t.preventDefault(),this.emitEvent("dragMove",[t,e,n])},r._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},r.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},r.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},r._staticClick=function(t,e){if(!this.isIgnoringMouseUp||"mouseup"!=t.type){var n=t.target.nodeName;("INPUT"==n||"TEXTAREA"==n)&&t.target.focus(),this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400))}},r.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},i.getPointerPoint=e.getPointerPoint,i})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,